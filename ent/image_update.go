// Code generated by ent, DO NOT EDIT.

package ent

import (
	"blog-go/ent/book"
	"blog-go/ent/image"
	"blog-go/ent/predicate"
	"blog-go/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ImageUpdate is the builder for updating Image entities.
type ImageUpdate struct {
	config
	hooks    []Hook
	mutation *ImageMutation
}

// Where appends a list predicates to the ImageUpdate builder.
func (iu *ImageUpdate) Where(ps ...predicate.Image) *ImageUpdate {
	iu.mutation.Where(ps...)
	return iu
}

// SetFilename sets the "filename" field.
func (iu *ImageUpdate) SetFilename(s string) *ImageUpdate {
	iu.mutation.SetFilename(s)
	return iu
}

// SetNillableFilename sets the "filename" field if the given value is not nil.
func (iu *ImageUpdate) SetNillableFilename(s *string) *ImageUpdate {
	if s != nil {
		iu.SetFilename(*s)
	}
	return iu
}

// SetURL sets the "url" field.
func (iu *ImageUpdate) SetURL(s string) *ImageUpdate {
	iu.mutation.SetURL(s)
	return iu
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (iu *ImageUpdate) SetNillableURL(s *string) *ImageUpdate {
	if s != nil {
		iu.SetURL(*s)
	}
	return iu
}

// SetSize sets the "size" field.
func (iu *ImageUpdate) SetSize(i int64) *ImageUpdate {
	iu.mutation.ResetSize()
	iu.mutation.SetSize(i)
	return iu
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (iu *ImageUpdate) SetNillableSize(i *int64) *ImageUpdate {
	if i != nil {
		iu.SetSize(*i)
	}
	return iu
}

// AddSize adds i to the "size" field.
func (iu *ImageUpdate) AddSize(i int64) *ImageUpdate {
	iu.mutation.AddSize(i)
	return iu
}

// SetType sets the "type" field.
func (iu *ImageUpdate) SetType(s string) *ImageUpdate {
	iu.mutation.SetType(s)
	return iu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (iu *ImageUpdate) SetNillableType(s *string) *ImageUpdate {
	if s != nil {
		iu.SetType(*s)
	}
	return iu
}

// SetCreatedAt sets the "created_at" field.
func (iu *ImageUpdate) SetCreatedAt(t time.Time) *ImageUpdate {
	iu.mutation.SetCreatedAt(t)
	return iu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (iu *ImageUpdate) SetNillableCreatedAt(t *time.Time) *ImageUpdate {
	if t != nil {
		iu.SetCreatedAt(*t)
	}
	return iu
}

// SetWidth sets the "width" field.
func (iu *ImageUpdate) SetWidth(i int) *ImageUpdate {
	iu.mutation.ResetWidth()
	iu.mutation.SetWidth(i)
	return iu
}

// SetNillableWidth sets the "width" field if the given value is not nil.
func (iu *ImageUpdate) SetNillableWidth(i *int) *ImageUpdate {
	if i != nil {
		iu.SetWidth(*i)
	}
	return iu
}

// AddWidth adds i to the "width" field.
func (iu *ImageUpdate) AddWidth(i int) *ImageUpdate {
	iu.mutation.AddWidth(i)
	return iu
}

// SetHeight sets the "height" field.
func (iu *ImageUpdate) SetHeight(i int) *ImageUpdate {
	iu.mutation.ResetHeight()
	iu.mutation.SetHeight(i)
	return iu
}

// SetNillableHeight sets the "height" field if the given value is not nil.
func (iu *ImageUpdate) SetNillableHeight(i *int) *ImageUpdate {
	if i != nil {
		iu.SetHeight(*i)
	}
	return iu
}

// AddHeight adds i to the "height" field.
func (iu *ImageUpdate) AddHeight(i int) *ImageUpdate {
	iu.mutation.AddHeight(i)
	return iu
}

// SetUploadedByID sets the "uploaded_by" edge to the User entity by ID.
func (iu *ImageUpdate) SetUploadedByID(id int) *ImageUpdate {
	iu.mutation.SetUploadedByID(id)
	return iu
}

// SetUploadedBy sets the "uploaded_by" edge to the User entity.
func (iu *ImageUpdate) SetUploadedBy(u *User) *ImageUpdate {
	return iu.SetUploadedByID(u.ID)
}

// AddBookIDs adds the "books" edge to the Book entity by IDs.
func (iu *ImageUpdate) AddBookIDs(ids ...int) *ImageUpdate {
	iu.mutation.AddBookIDs(ids...)
	return iu
}

// AddBooks adds the "books" edges to the Book entity.
func (iu *ImageUpdate) AddBooks(b ...*Book) *ImageUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return iu.AddBookIDs(ids...)
}

// Mutation returns the ImageMutation object of the builder.
func (iu *ImageUpdate) Mutation() *ImageMutation {
	return iu.mutation
}

// ClearUploadedBy clears the "uploaded_by" edge to the User entity.
func (iu *ImageUpdate) ClearUploadedBy() *ImageUpdate {
	iu.mutation.ClearUploadedBy()
	return iu
}

// ClearBooks clears all "books" edges to the Book entity.
func (iu *ImageUpdate) ClearBooks() *ImageUpdate {
	iu.mutation.ClearBooks()
	return iu
}

// RemoveBookIDs removes the "books" edge to Book entities by IDs.
func (iu *ImageUpdate) RemoveBookIDs(ids ...int) *ImageUpdate {
	iu.mutation.RemoveBookIDs(ids...)
	return iu
}

// RemoveBooks removes "books" edges to Book entities.
func (iu *ImageUpdate) RemoveBooks(b ...*Book) *ImageUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return iu.RemoveBookIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iu *ImageUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, iu.sqlSave, iu.mutation, iu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iu *ImageUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *ImageUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *ImageUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iu *ImageUpdate) check() error {
	if v, ok := iu.mutation.Filename(); ok {
		if err := image.FilenameValidator(v); err != nil {
			return &ValidationError{Name: "filename", err: fmt.Errorf(`ent: validator failed for field "Image.filename": %w`, err)}
		}
	}
	if v, ok := iu.mutation.URL(); ok {
		if err := image.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "Image.url": %w`, err)}
		}
	}
	if v, ok := iu.mutation.Size(); ok {
		if err := image.SizeValidator(v); err != nil {
			return &ValidationError{Name: "size", err: fmt.Errorf(`ent: validator failed for field "Image.size": %w`, err)}
		}
	}
	if v, ok := iu.mutation.GetType(); ok {
		if err := image.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Image.type": %w`, err)}
		}
	}
	if _, ok := iu.mutation.UploadedByID(); iu.mutation.UploadedByCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Image.uploaded_by"`)
	}
	return nil
}

func (iu *ImageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := iu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(image.Table, image.Columns, sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt))
	if ps := iu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.Filename(); ok {
		_spec.SetField(image.FieldFilename, field.TypeString, value)
	}
	if value, ok := iu.mutation.URL(); ok {
		_spec.SetField(image.FieldURL, field.TypeString, value)
	}
	if value, ok := iu.mutation.Size(); ok {
		_spec.SetField(image.FieldSize, field.TypeInt64, value)
	}
	if value, ok := iu.mutation.AddedSize(); ok {
		_spec.AddField(image.FieldSize, field.TypeInt64, value)
	}
	if value, ok := iu.mutation.GetType(); ok {
		_spec.SetField(image.FieldType, field.TypeString, value)
	}
	if value, ok := iu.mutation.CreatedAt(); ok {
		_spec.SetField(image.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := iu.mutation.Width(); ok {
		_spec.SetField(image.FieldWidth, field.TypeInt, value)
	}
	if value, ok := iu.mutation.AddedWidth(); ok {
		_spec.AddField(image.FieldWidth, field.TypeInt, value)
	}
	if value, ok := iu.mutation.Height(); ok {
		_spec.SetField(image.FieldHeight, field.TypeInt, value)
	}
	if value, ok := iu.mutation.AddedHeight(); ok {
		_spec.AddField(image.FieldHeight, field.TypeInt, value)
	}
	if iu.mutation.UploadedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   image.UploadedByTable,
			Columns: []string{image.UploadedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.UploadedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   image.UploadedByTable,
			Columns: []string{image.UploadedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iu.mutation.BooksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   image.BooksTable,
			Columns: []string{image.BooksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(book.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.RemovedBooksIDs(); len(nodes) > 0 && !iu.mutation.BooksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   image.BooksTable,
			Columns: []string{image.BooksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(book.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.BooksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   image.BooksTable,
			Columns: []string{image.BooksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(book.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{image.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iu.mutation.done = true
	return n, nil
}

// ImageUpdateOne is the builder for updating a single Image entity.
type ImageUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ImageMutation
}

// SetFilename sets the "filename" field.
func (iuo *ImageUpdateOne) SetFilename(s string) *ImageUpdateOne {
	iuo.mutation.SetFilename(s)
	return iuo
}

// SetNillableFilename sets the "filename" field if the given value is not nil.
func (iuo *ImageUpdateOne) SetNillableFilename(s *string) *ImageUpdateOne {
	if s != nil {
		iuo.SetFilename(*s)
	}
	return iuo
}

// SetURL sets the "url" field.
func (iuo *ImageUpdateOne) SetURL(s string) *ImageUpdateOne {
	iuo.mutation.SetURL(s)
	return iuo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (iuo *ImageUpdateOne) SetNillableURL(s *string) *ImageUpdateOne {
	if s != nil {
		iuo.SetURL(*s)
	}
	return iuo
}

// SetSize sets the "size" field.
func (iuo *ImageUpdateOne) SetSize(i int64) *ImageUpdateOne {
	iuo.mutation.ResetSize()
	iuo.mutation.SetSize(i)
	return iuo
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (iuo *ImageUpdateOne) SetNillableSize(i *int64) *ImageUpdateOne {
	if i != nil {
		iuo.SetSize(*i)
	}
	return iuo
}

// AddSize adds i to the "size" field.
func (iuo *ImageUpdateOne) AddSize(i int64) *ImageUpdateOne {
	iuo.mutation.AddSize(i)
	return iuo
}

// SetType sets the "type" field.
func (iuo *ImageUpdateOne) SetType(s string) *ImageUpdateOne {
	iuo.mutation.SetType(s)
	return iuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (iuo *ImageUpdateOne) SetNillableType(s *string) *ImageUpdateOne {
	if s != nil {
		iuo.SetType(*s)
	}
	return iuo
}

// SetCreatedAt sets the "created_at" field.
func (iuo *ImageUpdateOne) SetCreatedAt(t time.Time) *ImageUpdateOne {
	iuo.mutation.SetCreatedAt(t)
	return iuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (iuo *ImageUpdateOne) SetNillableCreatedAt(t *time.Time) *ImageUpdateOne {
	if t != nil {
		iuo.SetCreatedAt(*t)
	}
	return iuo
}

// SetWidth sets the "width" field.
func (iuo *ImageUpdateOne) SetWidth(i int) *ImageUpdateOne {
	iuo.mutation.ResetWidth()
	iuo.mutation.SetWidth(i)
	return iuo
}

// SetNillableWidth sets the "width" field if the given value is not nil.
func (iuo *ImageUpdateOne) SetNillableWidth(i *int) *ImageUpdateOne {
	if i != nil {
		iuo.SetWidth(*i)
	}
	return iuo
}

// AddWidth adds i to the "width" field.
func (iuo *ImageUpdateOne) AddWidth(i int) *ImageUpdateOne {
	iuo.mutation.AddWidth(i)
	return iuo
}

// SetHeight sets the "height" field.
func (iuo *ImageUpdateOne) SetHeight(i int) *ImageUpdateOne {
	iuo.mutation.ResetHeight()
	iuo.mutation.SetHeight(i)
	return iuo
}

// SetNillableHeight sets the "height" field if the given value is not nil.
func (iuo *ImageUpdateOne) SetNillableHeight(i *int) *ImageUpdateOne {
	if i != nil {
		iuo.SetHeight(*i)
	}
	return iuo
}

// AddHeight adds i to the "height" field.
func (iuo *ImageUpdateOne) AddHeight(i int) *ImageUpdateOne {
	iuo.mutation.AddHeight(i)
	return iuo
}

// SetUploadedByID sets the "uploaded_by" edge to the User entity by ID.
func (iuo *ImageUpdateOne) SetUploadedByID(id int) *ImageUpdateOne {
	iuo.mutation.SetUploadedByID(id)
	return iuo
}

// SetUploadedBy sets the "uploaded_by" edge to the User entity.
func (iuo *ImageUpdateOne) SetUploadedBy(u *User) *ImageUpdateOne {
	return iuo.SetUploadedByID(u.ID)
}

// AddBookIDs adds the "books" edge to the Book entity by IDs.
func (iuo *ImageUpdateOne) AddBookIDs(ids ...int) *ImageUpdateOne {
	iuo.mutation.AddBookIDs(ids...)
	return iuo
}

// AddBooks adds the "books" edges to the Book entity.
func (iuo *ImageUpdateOne) AddBooks(b ...*Book) *ImageUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return iuo.AddBookIDs(ids...)
}

// Mutation returns the ImageMutation object of the builder.
func (iuo *ImageUpdateOne) Mutation() *ImageMutation {
	return iuo.mutation
}

// ClearUploadedBy clears the "uploaded_by" edge to the User entity.
func (iuo *ImageUpdateOne) ClearUploadedBy() *ImageUpdateOne {
	iuo.mutation.ClearUploadedBy()
	return iuo
}

// ClearBooks clears all "books" edges to the Book entity.
func (iuo *ImageUpdateOne) ClearBooks() *ImageUpdateOne {
	iuo.mutation.ClearBooks()
	return iuo
}

// RemoveBookIDs removes the "books" edge to Book entities by IDs.
func (iuo *ImageUpdateOne) RemoveBookIDs(ids ...int) *ImageUpdateOne {
	iuo.mutation.RemoveBookIDs(ids...)
	return iuo
}

// RemoveBooks removes "books" edges to Book entities.
func (iuo *ImageUpdateOne) RemoveBooks(b ...*Book) *ImageUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return iuo.RemoveBookIDs(ids...)
}

// Where appends a list predicates to the ImageUpdate builder.
func (iuo *ImageUpdateOne) Where(ps ...predicate.Image) *ImageUpdateOne {
	iuo.mutation.Where(ps...)
	return iuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iuo *ImageUpdateOne) Select(field string, fields ...string) *ImageUpdateOne {
	iuo.fields = append([]string{field}, fields...)
	return iuo
}

// Save executes the query and returns the updated Image entity.
func (iuo *ImageUpdateOne) Save(ctx context.Context) (*Image, error) {
	return withHooks(ctx, iuo.sqlSave, iuo.mutation, iuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *ImageUpdateOne) SaveX(ctx context.Context) *Image {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *ImageUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *ImageUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iuo *ImageUpdateOne) check() error {
	if v, ok := iuo.mutation.Filename(); ok {
		if err := image.FilenameValidator(v); err != nil {
			return &ValidationError{Name: "filename", err: fmt.Errorf(`ent: validator failed for field "Image.filename": %w`, err)}
		}
	}
	if v, ok := iuo.mutation.URL(); ok {
		if err := image.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "Image.url": %w`, err)}
		}
	}
	if v, ok := iuo.mutation.Size(); ok {
		if err := image.SizeValidator(v); err != nil {
			return &ValidationError{Name: "size", err: fmt.Errorf(`ent: validator failed for field "Image.size": %w`, err)}
		}
	}
	if v, ok := iuo.mutation.GetType(); ok {
		if err := image.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Image.type": %w`, err)}
		}
	}
	if _, ok := iuo.mutation.UploadedByID(); iuo.mutation.UploadedByCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Image.uploaded_by"`)
	}
	return nil
}

func (iuo *ImageUpdateOne) sqlSave(ctx context.Context) (_node *Image, err error) {
	if err := iuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(image.Table, image.Columns, sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt))
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Image.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, image.FieldID)
		for _, f := range fields {
			if !image.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != image.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iuo.mutation.Filename(); ok {
		_spec.SetField(image.FieldFilename, field.TypeString, value)
	}
	if value, ok := iuo.mutation.URL(); ok {
		_spec.SetField(image.FieldURL, field.TypeString, value)
	}
	if value, ok := iuo.mutation.Size(); ok {
		_spec.SetField(image.FieldSize, field.TypeInt64, value)
	}
	if value, ok := iuo.mutation.AddedSize(); ok {
		_spec.AddField(image.FieldSize, field.TypeInt64, value)
	}
	if value, ok := iuo.mutation.GetType(); ok {
		_spec.SetField(image.FieldType, field.TypeString, value)
	}
	if value, ok := iuo.mutation.CreatedAt(); ok {
		_spec.SetField(image.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := iuo.mutation.Width(); ok {
		_spec.SetField(image.FieldWidth, field.TypeInt, value)
	}
	if value, ok := iuo.mutation.AddedWidth(); ok {
		_spec.AddField(image.FieldWidth, field.TypeInt, value)
	}
	if value, ok := iuo.mutation.Height(); ok {
		_spec.SetField(image.FieldHeight, field.TypeInt, value)
	}
	if value, ok := iuo.mutation.AddedHeight(); ok {
		_spec.AddField(image.FieldHeight, field.TypeInt, value)
	}
	if iuo.mutation.UploadedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   image.UploadedByTable,
			Columns: []string{image.UploadedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.UploadedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   image.UploadedByTable,
			Columns: []string{image.UploadedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iuo.mutation.BooksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   image.BooksTable,
			Columns: []string{image.BooksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(book.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.RemovedBooksIDs(); len(nodes) > 0 && !iuo.mutation.BooksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   image.BooksTable,
			Columns: []string{image.BooksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(book.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.BooksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   image.BooksTable,
			Columns: []string{image.BooksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(book.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Image{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{image.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iuo.mutation.done = true
	return _node, nil
}
