// Code generated by ent, DO NOT EDIT.

package ent

import (
	"blog-go/ent/comment"
	"blog-go/ent/post"
	"blog-go/ent/predicate"
	"blog-go/ent/tag"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PostUpdate is the builder for updating Post entities.
type PostUpdate struct {
	config
	hooks    []Hook
	mutation *PostMutation
}

// Where appends a list predicates to the PostUpdate builder.
func (pu *PostUpdate) Where(ps ...predicate.Post) *PostUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetTitle sets the "title" field.
func (pu *PostUpdate) SetTitle(s string) *PostUpdate {
	pu.mutation.SetTitle(s)
	return pu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (pu *PostUpdate) SetNillableTitle(s *string) *PostUpdate {
	if s != nil {
		pu.SetTitle(*s)
	}
	return pu
}

// SetContent sets the "content" field.
func (pu *PostUpdate) SetContent(s string) *PostUpdate {
	pu.mutation.SetContent(s)
	return pu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (pu *PostUpdate) SetNillableContent(s *string) *PostUpdate {
	if s != nil {
		pu.SetContent(*s)
	}
	return pu
}

// SetExcerpt sets the "excerpt" field.
func (pu *PostUpdate) SetExcerpt(s string) *PostUpdate {
	pu.mutation.SetExcerpt(s)
	return pu
}

// SetNillableExcerpt sets the "excerpt" field if the given value is not nil.
func (pu *PostUpdate) SetNillableExcerpt(s *string) *PostUpdate {
	if s != nil {
		pu.SetExcerpt(*s)
	}
	return pu
}

// SetCoverImage sets the "cover_image" field.
func (pu *PostUpdate) SetCoverImage(s string) *PostUpdate {
	pu.mutation.SetCoverImage(s)
	return pu
}

// SetNillableCoverImage sets the "cover_image" field if the given value is not nil.
func (pu *PostUpdate) SetNillableCoverImage(s *string) *PostUpdate {
	if s != nil {
		pu.SetCoverImage(*s)
	}
	return pu
}

// SetPublished sets the "published" field.
func (pu *PostUpdate) SetPublished(b bool) *PostUpdate {
	pu.mutation.SetPublished(b)
	return pu
}

// SetNillablePublished sets the "published" field if the given value is not nil.
func (pu *PostUpdate) SetNillablePublished(b *bool) *PostUpdate {
	if b != nil {
		pu.SetPublished(*b)
	}
	return pu
}

// SetCreatedAt sets the "created_at" field.
func (pu *PostUpdate) SetCreatedAt(t time.Time) *PostUpdate {
	pu.mutation.SetCreatedAt(t)
	return pu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pu *PostUpdate) SetNillableCreatedAt(t *time.Time) *PostUpdate {
	if t != nil {
		pu.SetCreatedAt(*t)
	}
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *PostUpdate) SetUpdatedAt(t time.Time) *PostUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pu *PostUpdate) SetNillableUpdatedAt(t *time.Time) *PostUpdate {
	if t != nil {
		pu.SetUpdatedAt(*t)
	}
	return pu
}

// SetPublishedAt sets the "published_at" field.
func (pu *PostUpdate) SetPublishedAt(t time.Time) *PostUpdate {
	pu.mutation.SetPublishedAt(t)
	return pu
}

// SetNillablePublishedAt sets the "published_at" field if the given value is not nil.
func (pu *PostUpdate) SetNillablePublishedAt(t *time.Time) *PostUpdate {
	if t != nil {
		pu.SetPublishedAt(*t)
	}
	return pu
}

// ClearPublishedAt clears the value of the "published_at" field.
func (pu *PostUpdate) ClearPublishedAt() *PostUpdate {
	pu.mutation.ClearPublishedAt()
	return pu
}

// SetViews sets the "views" field.
func (pu *PostUpdate) SetViews(i int) *PostUpdate {
	pu.mutation.ResetViews()
	pu.mutation.SetViews(i)
	return pu
}

// SetNillableViews sets the "views" field if the given value is not nil.
func (pu *PostUpdate) SetNillableViews(i *int) *PostUpdate {
	if i != nil {
		pu.SetViews(*i)
	}
	return pu
}

// AddViews adds i to the "views" field.
func (pu *PostUpdate) AddViews(i int) *PostUpdate {
	pu.mutation.AddViews(i)
	return pu
}

// SetAuthorType sets the "author_type" field.
func (pu *PostUpdate) SetAuthorType(pt post.AuthorType) *PostUpdate {
	pu.mutation.SetAuthorType(pt)
	return pu
}

// SetNillableAuthorType sets the "author_type" field if the given value is not nil.
func (pu *PostUpdate) SetNillableAuthorType(pt *post.AuthorType) *PostUpdate {
	if pt != nil {
		pu.SetAuthorType(*pt)
	}
	return pu
}

// SetAuthor sets the "author" field.
func (pu *PostUpdate) SetAuthor(s string) *PostUpdate {
	pu.mutation.SetAuthor(s)
	return pu
}

// SetNillableAuthor sets the "author" field if the given value is not nil.
func (pu *PostUpdate) SetNillableAuthor(s *string) *PostUpdate {
	if s != nil {
		pu.SetAuthor(*s)
	}
	return pu
}

// AddCommentIDs adds the "comments" edge to the Comment entity by IDs.
func (pu *PostUpdate) AddCommentIDs(ids ...int) *PostUpdate {
	pu.mutation.AddCommentIDs(ids...)
	return pu
}

// AddComments adds the "comments" edges to the Comment entity.
func (pu *PostUpdate) AddComments(c ...*Comment) *PostUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.AddCommentIDs(ids...)
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (pu *PostUpdate) AddTagIDs(ids ...int) *PostUpdate {
	pu.mutation.AddTagIDs(ids...)
	return pu
}

// AddTags adds the "tags" edges to the Tag entity.
func (pu *PostUpdate) AddTags(t ...*Tag) *PostUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pu.AddTagIDs(ids...)
}

// Mutation returns the PostMutation object of the builder.
func (pu *PostUpdate) Mutation() *PostMutation {
	return pu.mutation
}

// ClearComments clears all "comments" edges to the Comment entity.
func (pu *PostUpdate) ClearComments() *PostUpdate {
	pu.mutation.ClearComments()
	return pu
}

// RemoveCommentIDs removes the "comments" edge to Comment entities by IDs.
func (pu *PostUpdate) RemoveCommentIDs(ids ...int) *PostUpdate {
	pu.mutation.RemoveCommentIDs(ids...)
	return pu
}

// RemoveComments removes "comments" edges to Comment entities.
func (pu *PostUpdate) RemoveComments(c ...*Comment) *PostUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.RemoveCommentIDs(ids...)
}

// ClearTags clears all "tags" edges to the Tag entity.
func (pu *PostUpdate) ClearTags() *PostUpdate {
	pu.mutation.ClearTags()
	return pu
}

// RemoveTagIDs removes the "tags" edge to Tag entities by IDs.
func (pu *PostUpdate) RemoveTagIDs(ids ...int) *PostUpdate {
	pu.mutation.RemoveTagIDs(ids...)
	return pu
}

// RemoveTags removes "tags" edges to Tag entities.
func (pu *PostUpdate) RemoveTags(t ...*Tag) *PostUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pu.RemoveTagIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PostUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PostUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PostUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PostUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PostUpdate) check() error {
	if v, ok := pu.mutation.Title(); ok {
		if err := post.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Post.title": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Content(); ok {
		if err := post.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "Post.content": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Excerpt(); ok {
		if err := post.ExcerptValidator(v); err != nil {
			return &ValidationError{Name: "excerpt", err: fmt.Errorf(`ent: validator failed for field "Post.excerpt": %w`, err)}
		}
	}
	if v, ok := pu.mutation.AuthorType(); ok {
		if err := post.AuthorTypeValidator(v); err != nil {
			return &ValidationError{Name: "author_type", err: fmt.Errorf(`ent: validator failed for field "Post.author_type": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Author(); ok {
		if err := post.AuthorValidator(v); err != nil {
			return &ValidationError{Name: "author", err: fmt.Errorf(`ent: validator failed for field "Post.author": %w`, err)}
		}
	}
	return nil
}

func (pu *PostUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(post.Table, post.Columns, sqlgraph.NewFieldSpec(post.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Title(); ok {
		_spec.SetField(post.FieldTitle, field.TypeString, value)
	}
	if value, ok := pu.mutation.Content(); ok {
		_spec.SetField(post.FieldContent, field.TypeString, value)
	}
	if value, ok := pu.mutation.Excerpt(); ok {
		_spec.SetField(post.FieldExcerpt, field.TypeString, value)
	}
	if value, ok := pu.mutation.CoverImage(); ok {
		_spec.SetField(post.FieldCoverImage, field.TypeString, value)
	}
	if value, ok := pu.mutation.Published(); ok {
		_spec.SetField(post.FieldPublished, field.TypeBool, value)
	}
	if value, ok := pu.mutation.CreatedAt(); ok {
		_spec.SetField(post.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.SetField(post.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pu.mutation.PublishedAt(); ok {
		_spec.SetField(post.FieldPublishedAt, field.TypeTime, value)
	}
	if pu.mutation.PublishedAtCleared() {
		_spec.ClearField(post.FieldPublishedAt, field.TypeTime)
	}
	if value, ok := pu.mutation.Views(); ok {
		_spec.SetField(post.FieldViews, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedViews(); ok {
		_spec.AddField(post.FieldViews, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AuthorType(); ok {
		_spec.SetField(post.FieldAuthorType, field.TypeEnum, value)
	}
	if value, ok := pu.mutation.Author(); ok {
		_spec.SetField(post.FieldAuthor, field.TypeString, value)
	}
	if pu.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.CommentsTable,
			Columns: []string{post.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedCommentsIDs(); len(nodes) > 0 && !pu.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.CommentsTable,
			Columns: []string{post.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.CommentsTable,
			Columns: []string{post.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   post.TagsTable,
			Columns: post.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedTagsIDs(); len(nodes) > 0 && !pu.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   post.TagsTable,
			Columns: post.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   post.TagsTable,
			Columns: post.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{post.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PostUpdateOne is the builder for updating a single Post entity.
type PostUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PostMutation
}

// SetTitle sets the "title" field.
func (puo *PostUpdateOne) SetTitle(s string) *PostUpdateOne {
	puo.mutation.SetTitle(s)
	return puo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableTitle(s *string) *PostUpdateOne {
	if s != nil {
		puo.SetTitle(*s)
	}
	return puo
}

// SetContent sets the "content" field.
func (puo *PostUpdateOne) SetContent(s string) *PostUpdateOne {
	puo.mutation.SetContent(s)
	return puo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableContent(s *string) *PostUpdateOne {
	if s != nil {
		puo.SetContent(*s)
	}
	return puo
}

// SetExcerpt sets the "excerpt" field.
func (puo *PostUpdateOne) SetExcerpt(s string) *PostUpdateOne {
	puo.mutation.SetExcerpt(s)
	return puo
}

// SetNillableExcerpt sets the "excerpt" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableExcerpt(s *string) *PostUpdateOne {
	if s != nil {
		puo.SetExcerpt(*s)
	}
	return puo
}

// SetCoverImage sets the "cover_image" field.
func (puo *PostUpdateOne) SetCoverImage(s string) *PostUpdateOne {
	puo.mutation.SetCoverImage(s)
	return puo
}

// SetNillableCoverImage sets the "cover_image" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableCoverImage(s *string) *PostUpdateOne {
	if s != nil {
		puo.SetCoverImage(*s)
	}
	return puo
}

// SetPublished sets the "published" field.
func (puo *PostUpdateOne) SetPublished(b bool) *PostUpdateOne {
	puo.mutation.SetPublished(b)
	return puo
}

// SetNillablePublished sets the "published" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillablePublished(b *bool) *PostUpdateOne {
	if b != nil {
		puo.SetPublished(*b)
	}
	return puo
}

// SetCreatedAt sets the "created_at" field.
func (puo *PostUpdateOne) SetCreatedAt(t time.Time) *PostUpdateOne {
	puo.mutation.SetCreatedAt(t)
	return puo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableCreatedAt(t *time.Time) *PostUpdateOne {
	if t != nil {
		puo.SetCreatedAt(*t)
	}
	return puo
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *PostUpdateOne) SetUpdatedAt(t time.Time) *PostUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableUpdatedAt(t *time.Time) *PostUpdateOne {
	if t != nil {
		puo.SetUpdatedAt(*t)
	}
	return puo
}

// SetPublishedAt sets the "published_at" field.
func (puo *PostUpdateOne) SetPublishedAt(t time.Time) *PostUpdateOne {
	puo.mutation.SetPublishedAt(t)
	return puo
}

// SetNillablePublishedAt sets the "published_at" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillablePublishedAt(t *time.Time) *PostUpdateOne {
	if t != nil {
		puo.SetPublishedAt(*t)
	}
	return puo
}

// ClearPublishedAt clears the value of the "published_at" field.
func (puo *PostUpdateOne) ClearPublishedAt() *PostUpdateOne {
	puo.mutation.ClearPublishedAt()
	return puo
}

// SetViews sets the "views" field.
func (puo *PostUpdateOne) SetViews(i int) *PostUpdateOne {
	puo.mutation.ResetViews()
	puo.mutation.SetViews(i)
	return puo
}

// SetNillableViews sets the "views" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableViews(i *int) *PostUpdateOne {
	if i != nil {
		puo.SetViews(*i)
	}
	return puo
}

// AddViews adds i to the "views" field.
func (puo *PostUpdateOne) AddViews(i int) *PostUpdateOne {
	puo.mutation.AddViews(i)
	return puo
}

// SetAuthorType sets the "author_type" field.
func (puo *PostUpdateOne) SetAuthorType(pt post.AuthorType) *PostUpdateOne {
	puo.mutation.SetAuthorType(pt)
	return puo
}

// SetNillableAuthorType sets the "author_type" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableAuthorType(pt *post.AuthorType) *PostUpdateOne {
	if pt != nil {
		puo.SetAuthorType(*pt)
	}
	return puo
}

// SetAuthor sets the "author" field.
func (puo *PostUpdateOne) SetAuthor(s string) *PostUpdateOne {
	puo.mutation.SetAuthor(s)
	return puo
}

// SetNillableAuthor sets the "author" field if the given value is not nil.
func (puo *PostUpdateOne) SetNillableAuthor(s *string) *PostUpdateOne {
	if s != nil {
		puo.SetAuthor(*s)
	}
	return puo
}

// AddCommentIDs adds the "comments" edge to the Comment entity by IDs.
func (puo *PostUpdateOne) AddCommentIDs(ids ...int) *PostUpdateOne {
	puo.mutation.AddCommentIDs(ids...)
	return puo
}

// AddComments adds the "comments" edges to the Comment entity.
func (puo *PostUpdateOne) AddComments(c ...*Comment) *PostUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.AddCommentIDs(ids...)
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (puo *PostUpdateOne) AddTagIDs(ids ...int) *PostUpdateOne {
	puo.mutation.AddTagIDs(ids...)
	return puo
}

// AddTags adds the "tags" edges to the Tag entity.
func (puo *PostUpdateOne) AddTags(t ...*Tag) *PostUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return puo.AddTagIDs(ids...)
}

// Mutation returns the PostMutation object of the builder.
func (puo *PostUpdateOne) Mutation() *PostMutation {
	return puo.mutation
}

// ClearComments clears all "comments" edges to the Comment entity.
func (puo *PostUpdateOne) ClearComments() *PostUpdateOne {
	puo.mutation.ClearComments()
	return puo
}

// RemoveCommentIDs removes the "comments" edge to Comment entities by IDs.
func (puo *PostUpdateOne) RemoveCommentIDs(ids ...int) *PostUpdateOne {
	puo.mutation.RemoveCommentIDs(ids...)
	return puo
}

// RemoveComments removes "comments" edges to Comment entities.
func (puo *PostUpdateOne) RemoveComments(c ...*Comment) *PostUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.RemoveCommentIDs(ids...)
}

// ClearTags clears all "tags" edges to the Tag entity.
func (puo *PostUpdateOne) ClearTags() *PostUpdateOne {
	puo.mutation.ClearTags()
	return puo
}

// RemoveTagIDs removes the "tags" edge to Tag entities by IDs.
func (puo *PostUpdateOne) RemoveTagIDs(ids ...int) *PostUpdateOne {
	puo.mutation.RemoveTagIDs(ids...)
	return puo
}

// RemoveTags removes "tags" edges to Tag entities.
func (puo *PostUpdateOne) RemoveTags(t ...*Tag) *PostUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return puo.RemoveTagIDs(ids...)
}

// Where appends a list predicates to the PostUpdate builder.
func (puo *PostUpdateOne) Where(ps ...predicate.Post) *PostUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PostUpdateOne) Select(field string, fields ...string) *PostUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Post entity.
func (puo *PostUpdateOne) Save(ctx context.Context) (*Post, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PostUpdateOne) SaveX(ctx context.Context) *Post {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PostUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PostUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PostUpdateOne) check() error {
	if v, ok := puo.mutation.Title(); ok {
		if err := post.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Post.title": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Content(); ok {
		if err := post.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "Post.content": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Excerpt(); ok {
		if err := post.ExcerptValidator(v); err != nil {
			return &ValidationError{Name: "excerpt", err: fmt.Errorf(`ent: validator failed for field "Post.excerpt": %w`, err)}
		}
	}
	if v, ok := puo.mutation.AuthorType(); ok {
		if err := post.AuthorTypeValidator(v); err != nil {
			return &ValidationError{Name: "author_type", err: fmt.Errorf(`ent: validator failed for field "Post.author_type": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Author(); ok {
		if err := post.AuthorValidator(v); err != nil {
			return &ValidationError{Name: "author", err: fmt.Errorf(`ent: validator failed for field "Post.author": %w`, err)}
		}
	}
	return nil
}

func (puo *PostUpdateOne) sqlSave(ctx context.Context) (_node *Post, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(post.Table, post.Columns, sqlgraph.NewFieldSpec(post.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Post.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, post.FieldID)
		for _, f := range fields {
			if !post.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != post.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Title(); ok {
		_spec.SetField(post.FieldTitle, field.TypeString, value)
	}
	if value, ok := puo.mutation.Content(); ok {
		_spec.SetField(post.FieldContent, field.TypeString, value)
	}
	if value, ok := puo.mutation.Excerpt(); ok {
		_spec.SetField(post.FieldExcerpt, field.TypeString, value)
	}
	if value, ok := puo.mutation.CoverImage(); ok {
		_spec.SetField(post.FieldCoverImage, field.TypeString, value)
	}
	if value, ok := puo.mutation.Published(); ok {
		_spec.SetField(post.FieldPublished, field.TypeBool, value)
	}
	if value, ok := puo.mutation.CreatedAt(); ok {
		_spec.SetField(post.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.SetField(post.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := puo.mutation.PublishedAt(); ok {
		_spec.SetField(post.FieldPublishedAt, field.TypeTime, value)
	}
	if puo.mutation.PublishedAtCleared() {
		_spec.ClearField(post.FieldPublishedAt, field.TypeTime)
	}
	if value, ok := puo.mutation.Views(); ok {
		_spec.SetField(post.FieldViews, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedViews(); ok {
		_spec.AddField(post.FieldViews, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AuthorType(); ok {
		_spec.SetField(post.FieldAuthorType, field.TypeEnum, value)
	}
	if value, ok := puo.mutation.Author(); ok {
		_spec.SetField(post.FieldAuthor, field.TypeString, value)
	}
	if puo.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.CommentsTable,
			Columns: []string{post.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedCommentsIDs(); len(nodes) > 0 && !puo.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.CommentsTable,
			Columns: []string{post.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   post.CommentsTable,
			Columns: []string{post.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   post.TagsTable,
			Columns: post.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedTagsIDs(); len(nodes) > 0 && !puo.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   post.TagsTable,
			Columns: post.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   post.TagsTable,
			Columns: post.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Post{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{post.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
