// Code generated by ent, DO NOT EDIT.

package ent

import (
	"blog-go/ent/book"
	"blog-go/ent/image"
	"blog-go/ent/predicate"
	"blog-go/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BookUpdate is the builder for updating Book entities.
type BookUpdate struct {
	config
	hooks    []Hook
	mutation *BookMutation
}

// Where appends a list predicates to the BookUpdate builder.
func (bu *BookUpdate) Where(ps ...predicate.Book) *BookUpdate {
	bu.mutation.Where(ps...)
	return bu
}

// SetTitle sets the "title" field.
func (bu *BookUpdate) SetTitle(s string) *BookUpdate {
	bu.mutation.SetTitle(s)
	return bu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (bu *BookUpdate) SetNillableTitle(s *string) *BookUpdate {
	if s != nil {
		bu.SetTitle(*s)
	}
	return bu
}

// SetAuthor sets the "author" field.
func (bu *BookUpdate) SetAuthor(s string) *BookUpdate {
	bu.mutation.SetAuthor(s)
	return bu
}

// SetNillableAuthor sets the "author" field if the given value is not nil.
func (bu *BookUpdate) SetNillableAuthor(s *string) *BookUpdate {
	if s != nil {
		bu.SetAuthor(*s)
	}
	return bu
}

// SetDesc sets the "desc" field.
func (bu *BookUpdate) SetDesc(s string) *BookUpdate {
	bu.mutation.SetDesc(s)
	return bu
}

// SetNillableDesc sets the "desc" field if the given value is not nil.
func (bu *BookUpdate) SetNillableDesc(s *string) *BookUpdate {
	if s != nil {
		bu.SetDesc(*s)
	}
	return bu
}

// ClearDesc clears the value of the "desc" field.
func (bu *BookUpdate) ClearDesc() *BookUpdate {
	bu.mutation.ClearDesc()
	return bu
}

// SetCover sets the "cover" field.
func (bu *BookUpdate) SetCover(s string) *BookUpdate {
	bu.mutation.SetCover(s)
	return bu
}

// SetNillableCover sets the "cover" field if the given value is not nil.
func (bu *BookUpdate) SetNillableCover(s *string) *BookUpdate {
	if s != nil {
		bu.SetCover(*s)
	}
	return bu
}

// SetPublisher sets the "publisher" field.
func (bu *BookUpdate) SetPublisher(s string) *BookUpdate {
	bu.mutation.SetPublisher(s)
	return bu
}

// SetNillablePublisher sets the "publisher" field if the given value is not nil.
func (bu *BookUpdate) SetNillablePublisher(s *string) *BookUpdate {
	if s != nil {
		bu.SetPublisher(*s)
	}
	return bu
}

// ClearPublisher clears the value of the "publisher" field.
func (bu *BookUpdate) ClearPublisher() *BookUpdate {
	bu.mutation.ClearPublisher()
	return bu
}

// SetPublishDate sets the "publish_date" field.
func (bu *BookUpdate) SetPublishDate(s string) *BookUpdate {
	bu.mutation.SetPublishDate(s)
	return bu
}

// SetNillablePublishDate sets the "publish_date" field if the given value is not nil.
func (bu *BookUpdate) SetNillablePublishDate(s *string) *BookUpdate {
	if s != nil {
		bu.SetPublishDate(*s)
	}
	return bu
}

// ClearPublishDate clears the value of the "publish_date" field.
func (bu *BookUpdate) ClearPublishDate() *BookUpdate {
	bu.mutation.ClearPublishDate()
	return bu
}

// SetIsbn sets the "isbn" field.
func (bu *BookUpdate) SetIsbn(s string) *BookUpdate {
	bu.mutation.SetIsbn(s)
	return bu
}

// SetNillableIsbn sets the "isbn" field if the given value is not nil.
func (bu *BookUpdate) SetNillableIsbn(s *string) *BookUpdate {
	if s != nil {
		bu.SetIsbn(*s)
	}
	return bu
}

// ClearIsbn clears the value of the "isbn" field.
func (bu *BookUpdate) ClearIsbn() *BookUpdate {
	bu.mutation.ClearIsbn()
	return bu
}

// SetPages sets the "pages" field.
func (bu *BookUpdate) SetPages(i int) *BookUpdate {
	bu.mutation.ResetPages()
	bu.mutation.SetPages(i)
	return bu
}

// SetNillablePages sets the "pages" field if the given value is not nil.
func (bu *BookUpdate) SetNillablePages(i *int) *BookUpdate {
	if i != nil {
		bu.SetPages(*i)
	}
	return bu
}

// AddPages adds i to the "pages" field.
func (bu *BookUpdate) AddPages(i int) *BookUpdate {
	bu.mutation.AddPages(i)
	return bu
}

// ClearPages clears the value of the "pages" field.
func (bu *BookUpdate) ClearPages() *BookUpdate {
	bu.mutation.ClearPages()
	return bu
}

// SetRating sets the "rating" field.
func (bu *BookUpdate) SetRating(f float64) *BookUpdate {
	bu.mutation.ResetRating()
	bu.mutation.SetRating(f)
	return bu
}

// SetNillableRating sets the "rating" field if the given value is not nil.
func (bu *BookUpdate) SetNillableRating(f *float64) *BookUpdate {
	if f != nil {
		bu.SetRating(*f)
	}
	return bu
}

// AddRating adds f to the "rating" field.
func (bu *BookUpdate) AddRating(f float64) *BookUpdate {
	bu.mutation.AddRating(f)
	return bu
}

// SetStatus sets the "status" field.
func (bu *BookUpdate) SetStatus(b book.Status) *BookUpdate {
	bu.mutation.SetStatus(b)
	return bu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (bu *BookUpdate) SetNillableStatus(b *book.Status) *BookUpdate {
	if b != nil {
		bu.SetStatus(*b)
	}
	return bu
}

// SetReview sets the "review" field.
func (bu *BookUpdate) SetReview(s string) *BookUpdate {
	bu.mutation.SetReview(s)
	return bu
}

// SetNillableReview sets the "review" field if the given value is not nil.
func (bu *BookUpdate) SetNillableReview(s *string) *BookUpdate {
	if s != nil {
		bu.SetReview(*s)
	}
	return bu
}

// ClearReview clears the value of the "review" field.
func (bu *BookUpdate) ClearReview() *BookUpdate {
	bu.mutation.ClearReview()
	return bu
}

// SetCreatedAt sets the "created_at" field.
func (bu *BookUpdate) SetCreatedAt(t time.Time) *BookUpdate {
	bu.mutation.SetCreatedAt(t)
	return bu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bu *BookUpdate) SetNillableCreatedAt(t *time.Time) *BookUpdate {
	if t != nil {
		bu.SetCreatedAt(*t)
	}
	return bu
}

// SetUpdatedAt sets the "updated_at" field.
func (bu *BookUpdate) SetUpdatedAt(t time.Time) *BookUpdate {
	bu.mutation.SetUpdatedAt(t)
	return bu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (bu *BookUpdate) SetNillableUpdatedAt(t *time.Time) *BookUpdate {
	if t != nil {
		bu.SetUpdatedAt(*t)
	}
	return bu
}

// SetCoverImageID sets the "cover_image" edge to the Image entity by ID.
func (bu *BookUpdate) SetCoverImageID(id int) *BookUpdate {
	bu.mutation.SetCoverImageID(id)
	return bu
}

// SetNillableCoverImageID sets the "cover_image" edge to the Image entity by ID if the given value is not nil.
func (bu *BookUpdate) SetNillableCoverImageID(id *int) *BookUpdate {
	if id != nil {
		bu = bu.SetCoverImageID(*id)
	}
	return bu
}

// SetCoverImage sets the "cover_image" edge to the Image entity.
func (bu *BookUpdate) SetCoverImage(i *Image) *BookUpdate {
	return bu.SetCoverImageID(i.ID)
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (bu *BookUpdate) SetOwnerID(id int) *BookUpdate {
	bu.mutation.SetOwnerID(id)
	return bu
}

// SetOwner sets the "owner" edge to the User entity.
func (bu *BookUpdate) SetOwner(u *User) *BookUpdate {
	return bu.SetOwnerID(u.ID)
}

// Mutation returns the BookMutation object of the builder.
func (bu *BookUpdate) Mutation() *BookMutation {
	return bu.mutation
}

// ClearCoverImage clears the "cover_image" edge to the Image entity.
func (bu *BookUpdate) ClearCoverImage() *BookUpdate {
	bu.mutation.ClearCoverImage()
	return bu
}

// ClearOwner clears the "owner" edge to the User entity.
func (bu *BookUpdate) ClearOwner() *BookUpdate {
	bu.mutation.ClearOwner()
	return bu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bu *BookUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, bu.sqlSave, bu.mutation, bu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BookUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BookUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BookUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bu *BookUpdate) check() error {
	if v, ok := bu.mutation.Title(); ok {
		if err := book.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Book.title": %w`, err)}
		}
	}
	if v, ok := bu.mutation.Author(); ok {
		if err := book.AuthorValidator(v); err != nil {
			return &ValidationError{Name: "author", err: fmt.Errorf(`ent: validator failed for field "Book.author": %w`, err)}
		}
	}
	if v, ok := bu.mutation.Status(); ok {
		if err := book.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Book.status": %w`, err)}
		}
	}
	if _, ok := bu.mutation.OwnerID(); bu.mutation.OwnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Book.owner"`)
	}
	return nil
}

func (bu *BookUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := bu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(book.Table, book.Columns, sqlgraph.NewFieldSpec(book.FieldID, field.TypeInt))
	if ps := bu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.Title(); ok {
		_spec.SetField(book.FieldTitle, field.TypeString, value)
	}
	if value, ok := bu.mutation.Author(); ok {
		_spec.SetField(book.FieldAuthor, field.TypeString, value)
	}
	if value, ok := bu.mutation.Desc(); ok {
		_spec.SetField(book.FieldDesc, field.TypeString, value)
	}
	if bu.mutation.DescCleared() {
		_spec.ClearField(book.FieldDesc, field.TypeString)
	}
	if value, ok := bu.mutation.Cover(); ok {
		_spec.SetField(book.FieldCover, field.TypeString, value)
	}
	if value, ok := bu.mutation.Publisher(); ok {
		_spec.SetField(book.FieldPublisher, field.TypeString, value)
	}
	if bu.mutation.PublisherCleared() {
		_spec.ClearField(book.FieldPublisher, field.TypeString)
	}
	if value, ok := bu.mutation.PublishDate(); ok {
		_spec.SetField(book.FieldPublishDate, field.TypeString, value)
	}
	if bu.mutation.PublishDateCleared() {
		_spec.ClearField(book.FieldPublishDate, field.TypeString)
	}
	if value, ok := bu.mutation.Isbn(); ok {
		_spec.SetField(book.FieldIsbn, field.TypeString, value)
	}
	if bu.mutation.IsbnCleared() {
		_spec.ClearField(book.FieldIsbn, field.TypeString)
	}
	if value, ok := bu.mutation.Pages(); ok {
		_spec.SetField(book.FieldPages, field.TypeInt, value)
	}
	if value, ok := bu.mutation.AddedPages(); ok {
		_spec.AddField(book.FieldPages, field.TypeInt, value)
	}
	if bu.mutation.PagesCleared() {
		_spec.ClearField(book.FieldPages, field.TypeInt)
	}
	if value, ok := bu.mutation.Rating(); ok {
		_spec.SetField(book.FieldRating, field.TypeFloat64, value)
	}
	if value, ok := bu.mutation.AddedRating(); ok {
		_spec.AddField(book.FieldRating, field.TypeFloat64, value)
	}
	if value, ok := bu.mutation.Status(); ok {
		_spec.SetField(book.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := bu.mutation.Review(); ok {
		_spec.SetField(book.FieldReview, field.TypeString, value)
	}
	if bu.mutation.ReviewCleared() {
		_spec.ClearField(book.FieldReview, field.TypeString)
	}
	if value, ok := bu.mutation.CreatedAt(); ok {
		_spec.SetField(book.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := bu.mutation.UpdatedAt(); ok {
		_spec.SetField(book.FieldUpdatedAt, field.TypeTime, value)
	}
	if bu.mutation.CoverImageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   book.CoverImageTable,
			Columns: []string{book.CoverImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.CoverImageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   book.CoverImageTable,
			Columns: []string{book.CoverImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   book.OwnerTable,
			Columns: []string{book.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   book.OwnerTable,
			Columns: []string{book.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{book.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bu.mutation.done = true
	return n, nil
}

// BookUpdateOne is the builder for updating a single Book entity.
type BookUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BookMutation
}

// SetTitle sets the "title" field.
func (buo *BookUpdateOne) SetTitle(s string) *BookUpdateOne {
	buo.mutation.SetTitle(s)
	return buo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (buo *BookUpdateOne) SetNillableTitle(s *string) *BookUpdateOne {
	if s != nil {
		buo.SetTitle(*s)
	}
	return buo
}

// SetAuthor sets the "author" field.
func (buo *BookUpdateOne) SetAuthor(s string) *BookUpdateOne {
	buo.mutation.SetAuthor(s)
	return buo
}

// SetNillableAuthor sets the "author" field if the given value is not nil.
func (buo *BookUpdateOne) SetNillableAuthor(s *string) *BookUpdateOne {
	if s != nil {
		buo.SetAuthor(*s)
	}
	return buo
}

// SetDesc sets the "desc" field.
func (buo *BookUpdateOne) SetDesc(s string) *BookUpdateOne {
	buo.mutation.SetDesc(s)
	return buo
}

// SetNillableDesc sets the "desc" field if the given value is not nil.
func (buo *BookUpdateOne) SetNillableDesc(s *string) *BookUpdateOne {
	if s != nil {
		buo.SetDesc(*s)
	}
	return buo
}

// ClearDesc clears the value of the "desc" field.
func (buo *BookUpdateOne) ClearDesc() *BookUpdateOne {
	buo.mutation.ClearDesc()
	return buo
}

// SetCover sets the "cover" field.
func (buo *BookUpdateOne) SetCover(s string) *BookUpdateOne {
	buo.mutation.SetCover(s)
	return buo
}

// SetNillableCover sets the "cover" field if the given value is not nil.
func (buo *BookUpdateOne) SetNillableCover(s *string) *BookUpdateOne {
	if s != nil {
		buo.SetCover(*s)
	}
	return buo
}

// SetPublisher sets the "publisher" field.
func (buo *BookUpdateOne) SetPublisher(s string) *BookUpdateOne {
	buo.mutation.SetPublisher(s)
	return buo
}

// SetNillablePublisher sets the "publisher" field if the given value is not nil.
func (buo *BookUpdateOne) SetNillablePublisher(s *string) *BookUpdateOne {
	if s != nil {
		buo.SetPublisher(*s)
	}
	return buo
}

// ClearPublisher clears the value of the "publisher" field.
func (buo *BookUpdateOne) ClearPublisher() *BookUpdateOne {
	buo.mutation.ClearPublisher()
	return buo
}

// SetPublishDate sets the "publish_date" field.
func (buo *BookUpdateOne) SetPublishDate(s string) *BookUpdateOne {
	buo.mutation.SetPublishDate(s)
	return buo
}

// SetNillablePublishDate sets the "publish_date" field if the given value is not nil.
func (buo *BookUpdateOne) SetNillablePublishDate(s *string) *BookUpdateOne {
	if s != nil {
		buo.SetPublishDate(*s)
	}
	return buo
}

// ClearPublishDate clears the value of the "publish_date" field.
func (buo *BookUpdateOne) ClearPublishDate() *BookUpdateOne {
	buo.mutation.ClearPublishDate()
	return buo
}

// SetIsbn sets the "isbn" field.
func (buo *BookUpdateOne) SetIsbn(s string) *BookUpdateOne {
	buo.mutation.SetIsbn(s)
	return buo
}

// SetNillableIsbn sets the "isbn" field if the given value is not nil.
func (buo *BookUpdateOne) SetNillableIsbn(s *string) *BookUpdateOne {
	if s != nil {
		buo.SetIsbn(*s)
	}
	return buo
}

// ClearIsbn clears the value of the "isbn" field.
func (buo *BookUpdateOne) ClearIsbn() *BookUpdateOne {
	buo.mutation.ClearIsbn()
	return buo
}

// SetPages sets the "pages" field.
func (buo *BookUpdateOne) SetPages(i int) *BookUpdateOne {
	buo.mutation.ResetPages()
	buo.mutation.SetPages(i)
	return buo
}

// SetNillablePages sets the "pages" field if the given value is not nil.
func (buo *BookUpdateOne) SetNillablePages(i *int) *BookUpdateOne {
	if i != nil {
		buo.SetPages(*i)
	}
	return buo
}

// AddPages adds i to the "pages" field.
func (buo *BookUpdateOne) AddPages(i int) *BookUpdateOne {
	buo.mutation.AddPages(i)
	return buo
}

// ClearPages clears the value of the "pages" field.
func (buo *BookUpdateOne) ClearPages() *BookUpdateOne {
	buo.mutation.ClearPages()
	return buo
}

// SetRating sets the "rating" field.
func (buo *BookUpdateOne) SetRating(f float64) *BookUpdateOne {
	buo.mutation.ResetRating()
	buo.mutation.SetRating(f)
	return buo
}

// SetNillableRating sets the "rating" field if the given value is not nil.
func (buo *BookUpdateOne) SetNillableRating(f *float64) *BookUpdateOne {
	if f != nil {
		buo.SetRating(*f)
	}
	return buo
}

// AddRating adds f to the "rating" field.
func (buo *BookUpdateOne) AddRating(f float64) *BookUpdateOne {
	buo.mutation.AddRating(f)
	return buo
}

// SetStatus sets the "status" field.
func (buo *BookUpdateOne) SetStatus(b book.Status) *BookUpdateOne {
	buo.mutation.SetStatus(b)
	return buo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (buo *BookUpdateOne) SetNillableStatus(b *book.Status) *BookUpdateOne {
	if b != nil {
		buo.SetStatus(*b)
	}
	return buo
}

// SetReview sets the "review" field.
func (buo *BookUpdateOne) SetReview(s string) *BookUpdateOne {
	buo.mutation.SetReview(s)
	return buo
}

// SetNillableReview sets the "review" field if the given value is not nil.
func (buo *BookUpdateOne) SetNillableReview(s *string) *BookUpdateOne {
	if s != nil {
		buo.SetReview(*s)
	}
	return buo
}

// ClearReview clears the value of the "review" field.
func (buo *BookUpdateOne) ClearReview() *BookUpdateOne {
	buo.mutation.ClearReview()
	return buo
}

// SetCreatedAt sets the "created_at" field.
func (buo *BookUpdateOne) SetCreatedAt(t time.Time) *BookUpdateOne {
	buo.mutation.SetCreatedAt(t)
	return buo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (buo *BookUpdateOne) SetNillableCreatedAt(t *time.Time) *BookUpdateOne {
	if t != nil {
		buo.SetCreatedAt(*t)
	}
	return buo
}

// SetUpdatedAt sets the "updated_at" field.
func (buo *BookUpdateOne) SetUpdatedAt(t time.Time) *BookUpdateOne {
	buo.mutation.SetUpdatedAt(t)
	return buo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (buo *BookUpdateOne) SetNillableUpdatedAt(t *time.Time) *BookUpdateOne {
	if t != nil {
		buo.SetUpdatedAt(*t)
	}
	return buo
}

// SetCoverImageID sets the "cover_image" edge to the Image entity by ID.
func (buo *BookUpdateOne) SetCoverImageID(id int) *BookUpdateOne {
	buo.mutation.SetCoverImageID(id)
	return buo
}

// SetNillableCoverImageID sets the "cover_image" edge to the Image entity by ID if the given value is not nil.
func (buo *BookUpdateOne) SetNillableCoverImageID(id *int) *BookUpdateOne {
	if id != nil {
		buo = buo.SetCoverImageID(*id)
	}
	return buo
}

// SetCoverImage sets the "cover_image" edge to the Image entity.
func (buo *BookUpdateOne) SetCoverImage(i *Image) *BookUpdateOne {
	return buo.SetCoverImageID(i.ID)
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (buo *BookUpdateOne) SetOwnerID(id int) *BookUpdateOne {
	buo.mutation.SetOwnerID(id)
	return buo
}

// SetOwner sets the "owner" edge to the User entity.
func (buo *BookUpdateOne) SetOwner(u *User) *BookUpdateOne {
	return buo.SetOwnerID(u.ID)
}

// Mutation returns the BookMutation object of the builder.
func (buo *BookUpdateOne) Mutation() *BookMutation {
	return buo.mutation
}

// ClearCoverImage clears the "cover_image" edge to the Image entity.
func (buo *BookUpdateOne) ClearCoverImage() *BookUpdateOne {
	buo.mutation.ClearCoverImage()
	return buo
}

// ClearOwner clears the "owner" edge to the User entity.
func (buo *BookUpdateOne) ClearOwner() *BookUpdateOne {
	buo.mutation.ClearOwner()
	return buo
}

// Where appends a list predicates to the BookUpdate builder.
func (buo *BookUpdateOne) Where(ps ...predicate.Book) *BookUpdateOne {
	buo.mutation.Where(ps...)
	return buo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (buo *BookUpdateOne) Select(field string, fields ...string) *BookUpdateOne {
	buo.fields = append([]string{field}, fields...)
	return buo
}

// Save executes the query and returns the updated Book entity.
func (buo *BookUpdateOne) Save(ctx context.Context) (*Book, error) {
	return withHooks(ctx, buo.sqlSave, buo.mutation, buo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BookUpdateOne) SaveX(ctx context.Context) *Book {
	node, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buo *BookUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BookUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (buo *BookUpdateOne) check() error {
	if v, ok := buo.mutation.Title(); ok {
		if err := book.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Book.title": %w`, err)}
		}
	}
	if v, ok := buo.mutation.Author(); ok {
		if err := book.AuthorValidator(v); err != nil {
			return &ValidationError{Name: "author", err: fmt.Errorf(`ent: validator failed for field "Book.author": %w`, err)}
		}
	}
	if v, ok := buo.mutation.Status(); ok {
		if err := book.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Book.status": %w`, err)}
		}
	}
	if _, ok := buo.mutation.OwnerID(); buo.mutation.OwnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Book.owner"`)
	}
	return nil
}

func (buo *BookUpdateOne) sqlSave(ctx context.Context) (_node *Book, err error) {
	if err := buo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(book.Table, book.Columns, sqlgraph.NewFieldSpec(book.FieldID, field.TypeInt))
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Book.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := buo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, book.FieldID)
		for _, f := range fields {
			if !book.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != book.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := buo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buo.mutation.Title(); ok {
		_spec.SetField(book.FieldTitle, field.TypeString, value)
	}
	if value, ok := buo.mutation.Author(); ok {
		_spec.SetField(book.FieldAuthor, field.TypeString, value)
	}
	if value, ok := buo.mutation.Desc(); ok {
		_spec.SetField(book.FieldDesc, field.TypeString, value)
	}
	if buo.mutation.DescCleared() {
		_spec.ClearField(book.FieldDesc, field.TypeString)
	}
	if value, ok := buo.mutation.Cover(); ok {
		_spec.SetField(book.FieldCover, field.TypeString, value)
	}
	if value, ok := buo.mutation.Publisher(); ok {
		_spec.SetField(book.FieldPublisher, field.TypeString, value)
	}
	if buo.mutation.PublisherCleared() {
		_spec.ClearField(book.FieldPublisher, field.TypeString)
	}
	if value, ok := buo.mutation.PublishDate(); ok {
		_spec.SetField(book.FieldPublishDate, field.TypeString, value)
	}
	if buo.mutation.PublishDateCleared() {
		_spec.ClearField(book.FieldPublishDate, field.TypeString)
	}
	if value, ok := buo.mutation.Isbn(); ok {
		_spec.SetField(book.FieldIsbn, field.TypeString, value)
	}
	if buo.mutation.IsbnCleared() {
		_spec.ClearField(book.FieldIsbn, field.TypeString)
	}
	if value, ok := buo.mutation.Pages(); ok {
		_spec.SetField(book.FieldPages, field.TypeInt, value)
	}
	if value, ok := buo.mutation.AddedPages(); ok {
		_spec.AddField(book.FieldPages, field.TypeInt, value)
	}
	if buo.mutation.PagesCleared() {
		_spec.ClearField(book.FieldPages, field.TypeInt)
	}
	if value, ok := buo.mutation.Rating(); ok {
		_spec.SetField(book.FieldRating, field.TypeFloat64, value)
	}
	if value, ok := buo.mutation.AddedRating(); ok {
		_spec.AddField(book.FieldRating, field.TypeFloat64, value)
	}
	if value, ok := buo.mutation.Status(); ok {
		_spec.SetField(book.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := buo.mutation.Review(); ok {
		_spec.SetField(book.FieldReview, field.TypeString, value)
	}
	if buo.mutation.ReviewCleared() {
		_spec.ClearField(book.FieldReview, field.TypeString)
	}
	if value, ok := buo.mutation.CreatedAt(); ok {
		_spec.SetField(book.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := buo.mutation.UpdatedAt(); ok {
		_spec.SetField(book.FieldUpdatedAt, field.TypeTime, value)
	}
	if buo.mutation.CoverImageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   book.CoverImageTable,
			Columns: []string{book.CoverImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.CoverImageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   book.CoverImageTable,
			Columns: []string{book.CoverImageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   book.OwnerTable,
			Columns: []string{book.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   book.OwnerTable,
			Columns: []string{book.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Book{config: buo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{book.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	buo.mutation.done = true
	return _node, nil
}
