// Code generated by ent, DO NOT EDIT.

package ent

import (
	"blog-go/ent/hitokoto"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// HitokotoCreate is the builder for creating a Hitokoto entity.
type HitokotoCreate struct {
	config
	mutation *HitokotoMutation
	hooks    []Hook
}

// SetContent sets the "content" field.
func (hc *HitokotoCreate) SetContent(s string) *HitokotoCreate {
	hc.mutation.SetContent(s)
	return hc
}

// SetSource sets the "source" field.
func (hc *HitokotoCreate) SetSource(s string) *HitokotoCreate {
	hc.mutation.SetSource(s)
	return hc
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (hc *HitokotoCreate) SetNillableSource(s *string) *HitokotoCreate {
	if s != nil {
		hc.SetSource(*s)
	}
	return hc
}

// SetCreatedAt sets the "created_at" field.
func (hc *HitokotoCreate) SetCreatedAt(t time.Time) *HitokotoCreate {
	hc.mutation.SetCreatedAt(t)
	return hc
}

// SetUpdatedAt sets the "updated_at" field.
func (hc *HitokotoCreate) SetUpdatedAt(t time.Time) *HitokotoCreate {
	hc.mutation.SetUpdatedAt(t)
	return hc
}

// Mutation returns the HitokotoMutation object of the builder.
func (hc *HitokotoCreate) Mutation() *HitokotoMutation {
	return hc.mutation
}

// Save creates the Hitokoto in the database.
func (hc *HitokotoCreate) Save(ctx context.Context) (*Hitokoto, error) {
	return withHooks(ctx, hc.sqlSave, hc.mutation, hc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (hc *HitokotoCreate) SaveX(ctx context.Context) *Hitokoto {
	v, err := hc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hc *HitokotoCreate) Exec(ctx context.Context) error {
	_, err := hc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hc *HitokotoCreate) ExecX(ctx context.Context) {
	if err := hc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hc *HitokotoCreate) check() error {
	if _, ok := hc.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "Hitokoto.content"`)}
	}
	if v, ok := hc.mutation.Content(); ok {
		if err := hitokoto.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "Hitokoto.content": %w`, err)}
		}
	}
	if _, ok := hc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Hitokoto.created_at"`)}
	}
	if _, ok := hc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Hitokoto.updated_at"`)}
	}
	return nil
}

func (hc *HitokotoCreate) sqlSave(ctx context.Context) (*Hitokoto, error) {
	if err := hc.check(); err != nil {
		return nil, err
	}
	_node, _spec := hc.createSpec()
	if err := sqlgraph.CreateNode(ctx, hc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	hc.mutation.id = &_node.ID
	hc.mutation.done = true
	return _node, nil
}

func (hc *HitokotoCreate) createSpec() (*Hitokoto, *sqlgraph.CreateSpec) {
	var (
		_node = &Hitokoto{config: hc.config}
		_spec = sqlgraph.NewCreateSpec(hitokoto.Table, sqlgraph.NewFieldSpec(hitokoto.FieldID, field.TypeInt))
	)
	if value, ok := hc.mutation.Content(); ok {
		_spec.SetField(hitokoto.FieldContent, field.TypeString, value)
		_node.Content = value
	}
	if value, ok := hc.mutation.Source(); ok {
		_spec.SetField(hitokoto.FieldSource, field.TypeString, value)
		_node.Source = value
	}
	if value, ok := hc.mutation.CreatedAt(); ok {
		_spec.SetField(hitokoto.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := hc.mutation.UpdatedAt(); ok {
		_spec.SetField(hitokoto.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// HitokotoCreateBulk is the builder for creating many Hitokoto entities in bulk.
type HitokotoCreateBulk struct {
	config
	err      error
	builders []*HitokotoCreate
}

// Save creates the Hitokoto entities in the database.
func (hcb *HitokotoCreateBulk) Save(ctx context.Context) ([]*Hitokoto, error) {
	if hcb.err != nil {
		return nil, hcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(hcb.builders))
	nodes := make([]*Hitokoto, len(hcb.builders))
	mutators := make([]Mutator, len(hcb.builders))
	for i := range hcb.builders {
		func(i int, root context.Context) {
			builder := hcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*HitokotoMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, hcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, hcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, hcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (hcb *HitokotoCreateBulk) SaveX(ctx context.Context) []*Hitokoto {
	v, err := hcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hcb *HitokotoCreateBulk) Exec(ctx context.Context) error {
	_, err := hcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hcb *HitokotoCreateBulk) ExecX(ctx context.Context) {
	if err := hcb.Exec(ctx); err != nil {
		panic(err)
	}
}
