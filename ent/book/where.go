// Code generated by ent, DO NOT EDIT.

package book

import (
	"blog-go/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Book {
	return predicate.Book(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Book {
	return predicate.Book(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Book {
	return predicate.Book(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Book {
	return predicate.Book(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Book {
	return predicate.Book(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Book {
	return predicate.Book(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Book {
	return predicate.Book(sql.FieldLTE(FieldID, id))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldTitle, v))
}

// Author applies equality check predicate on the "author" field. It's identical to AuthorEQ.
func Author(v string) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldAuthor, v))
}

// Desc applies equality check predicate on the "desc" field. It's identical to DescEQ.
func Desc(v string) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldDesc, v))
}

// Cover applies equality check predicate on the "cover" field. It's identical to CoverEQ.
func Cover(v string) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldCover, v))
}

// Publisher applies equality check predicate on the "publisher" field. It's identical to PublisherEQ.
func Publisher(v string) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldPublisher, v))
}

// PublishDate applies equality check predicate on the "publish_date" field. It's identical to PublishDateEQ.
func PublishDate(v string) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldPublishDate, v))
}

// Isbn applies equality check predicate on the "isbn" field. It's identical to IsbnEQ.
func Isbn(v string) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldIsbn, v))
}

// Pages applies equality check predicate on the "pages" field. It's identical to PagesEQ.
func Pages(v int) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldPages, v))
}

// Rating applies equality check predicate on the "rating" field. It's identical to RatingEQ.
func Rating(v float64) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldRating, v))
}

// Review applies equality check predicate on the "review" field. It's identical to ReviewEQ.
func Review(v string) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldReview, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldUpdatedAt, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Book {
	return predicate.Book(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Book {
	return predicate.Book(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Book {
	return predicate.Book(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Book {
	return predicate.Book(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Book {
	return predicate.Book(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Book {
	return predicate.Book(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Book {
	return predicate.Book(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Book {
	return predicate.Book(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Book {
	return predicate.Book(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Book {
	return predicate.Book(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Book {
	return predicate.Book(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Book {
	return predicate.Book(sql.FieldContainsFold(FieldTitle, v))
}

// AuthorEQ applies the EQ predicate on the "author" field.
func AuthorEQ(v string) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldAuthor, v))
}

// AuthorNEQ applies the NEQ predicate on the "author" field.
func AuthorNEQ(v string) predicate.Book {
	return predicate.Book(sql.FieldNEQ(FieldAuthor, v))
}

// AuthorIn applies the In predicate on the "author" field.
func AuthorIn(vs ...string) predicate.Book {
	return predicate.Book(sql.FieldIn(FieldAuthor, vs...))
}

// AuthorNotIn applies the NotIn predicate on the "author" field.
func AuthorNotIn(vs ...string) predicate.Book {
	return predicate.Book(sql.FieldNotIn(FieldAuthor, vs...))
}

// AuthorGT applies the GT predicate on the "author" field.
func AuthorGT(v string) predicate.Book {
	return predicate.Book(sql.FieldGT(FieldAuthor, v))
}

// AuthorGTE applies the GTE predicate on the "author" field.
func AuthorGTE(v string) predicate.Book {
	return predicate.Book(sql.FieldGTE(FieldAuthor, v))
}

// AuthorLT applies the LT predicate on the "author" field.
func AuthorLT(v string) predicate.Book {
	return predicate.Book(sql.FieldLT(FieldAuthor, v))
}

// AuthorLTE applies the LTE predicate on the "author" field.
func AuthorLTE(v string) predicate.Book {
	return predicate.Book(sql.FieldLTE(FieldAuthor, v))
}

// AuthorContains applies the Contains predicate on the "author" field.
func AuthorContains(v string) predicate.Book {
	return predicate.Book(sql.FieldContains(FieldAuthor, v))
}

// AuthorHasPrefix applies the HasPrefix predicate on the "author" field.
func AuthorHasPrefix(v string) predicate.Book {
	return predicate.Book(sql.FieldHasPrefix(FieldAuthor, v))
}

// AuthorHasSuffix applies the HasSuffix predicate on the "author" field.
func AuthorHasSuffix(v string) predicate.Book {
	return predicate.Book(sql.FieldHasSuffix(FieldAuthor, v))
}

// AuthorEqualFold applies the EqualFold predicate on the "author" field.
func AuthorEqualFold(v string) predicate.Book {
	return predicate.Book(sql.FieldEqualFold(FieldAuthor, v))
}

// AuthorContainsFold applies the ContainsFold predicate on the "author" field.
func AuthorContainsFold(v string) predicate.Book {
	return predicate.Book(sql.FieldContainsFold(FieldAuthor, v))
}

// DescEQ applies the EQ predicate on the "desc" field.
func DescEQ(v string) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldDesc, v))
}

// DescNEQ applies the NEQ predicate on the "desc" field.
func DescNEQ(v string) predicate.Book {
	return predicate.Book(sql.FieldNEQ(FieldDesc, v))
}

// DescIn applies the In predicate on the "desc" field.
func DescIn(vs ...string) predicate.Book {
	return predicate.Book(sql.FieldIn(FieldDesc, vs...))
}

// DescNotIn applies the NotIn predicate on the "desc" field.
func DescNotIn(vs ...string) predicate.Book {
	return predicate.Book(sql.FieldNotIn(FieldDesc, vs...))
}

// DescGT applies the GT predicate on the "desc" field.
func DescGT(v string) predicate.Book {
	return predicate.Book(sql.FieldGT(FieldDesc, v))
}

// DescGTE applies the GTE predicate on the "desc" field.
func DescGTE(v string) predicate.Book {
	return predicate.Book(sql.FieldGTE(FieldDesc, v))
}

// DescLT applies the LT predicate on the "desc" field.
func DescLT(v string) predicate.Book {
	return predicate.Book(sql.FieldLT(FieldDesc, v))
}

// DescLTE applies the LTE predicate on the "desc" field.
func DescLTE(v string) predicate.Book {
	return predicate.Book(sql.FieldLTE(FieldDesc, v))
}

// DescContains applies the Contains predicate on the "desc" field.
func DescContains(v string) predicate.Book {
	return predicate.Book(sql.FieldContains(FieldDesc, v))
}

// DescHasPrefix applies the HasPrefix predicate on the "desc" field.
func DescHasPrefix(v string) predicate.Book {
	return predicate.Book(sql.FieldHasPrefix(FieldDesc, v))
}

// DescHasSuffix applies the HasSuffix predicate on the "desc" field.
func DescHasSuffix(v string) predicate.Book {
	return predicate.Book(sql.FieldHasSuffix(FieldDesc, v))
}

// DescIsNil applies the IsNil predicate on the "desc" field.
func DescIsNil() predicate.Book {
	return predicate.Book(sql.FieldIsNull(FieldDesc))
}

// DescNotNil applies the NotNil predicate on the "desc" field.
func DescNotNil() predicate.Book {
	return predicate.Book(sql.FieldNotNull(FieldDesc))
}

// DescEqualFold applies the EqualFold predicate on the "desc" field.
func DescEqualFold(v string) predicate.Book {
	return predicate.Book(sql.FieldEqualFold(FieldDesc, v))
}

// DescContainsFold applies the ContainsFold predicate on the "desc" field.
func DescContainsFold(v string) predicate.Book {
	return predicate.Book(sql.FieldContainsFold(FieldDesc, v))
}

// CoverEQ applies the EQ predicate on the "cover" field.
func CoverEQ(v string) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldCover, v))
}

// CoverNEQ applies the NEQ predicate on the "cover" field.
func CoverNEQ(v string) predicate.Book {
	return predicate.Book(sql.FieldNEQ(FieldCover, v))
}

// CoverIn applies the In predicate on the "cover" field.
func CoverIn(vs ...string) predicate.Book {
	return predicate.Book(sql.FieldIn(FieldCover, vs...))
}

// CoverNotIn applies the NotIn predicate on the "cover" field.
func CoverNotIn(vs ...string) predicate.Book {
	return predicate.Book(sql.FieldNotIn(FieldCover, vs...))
}

// CoverGT applies the GT predicate on the "cover" field.
func CoverGT(v string) predicate.Book {
	return predicate.Book(sql.FieldGT(FieldCover, v))
}

// CoverGTE applies the GTE predicate on the "cover" field.
func CoverGTE(v string) predicate.Book {
	return predicate.Book(sql.FieldGTE(FieldCover, v))
}

// CoverLT applies the LT predicate on the "cover" field.
func CoverLT(v string) predicate.Book {
	return predicate.Book(sql.FieldLT(FieldCover, v))
}

// CoverLTE applies the LTE predicate on the "cover" field.
func CoverLTE(v string) predicate.Book {
	return predicate.Book(sql.FieldLTE(FieldCover, v))
}

// CoverContains applies the Contains predicate on the "cover" field.
func CoverContains(v string) predicate.Book {
	return predicate.Book(sql.FieldContains(FieldCover, v))
}

// CoverHasPrefix applies the HasPrefix predicate on the "cover" field.
func CoverHasPrefix(v string) predicate.Book {
	return predicate.Book(sql.FieldHasPrefix(FieldCover, v))
}

// CoverHasSuffix applies the HasSuffix predicate on the "cover" field.
func CoverHasSuffix(v string) predicate.Book {
	return predicate.Book(sql.FieldHasSuffix(FieldCover, v))
}

// CoverEqualFold applies the EqualFold predicate on the "cover" field.
func CoverEqualFold(v string) predicate.Book {
	return predicate.Book(sql.FieldEqualFold(FieldCover, v))
}

// CoverContainsFold applies the ContainsFold predicate on the "cover" field.
func CoverContainsFold(v string) predicate.Book {
	return predicate.Book(sql.FieldContainsFold(FieldCover, v))
}

// PublisherEQ applies the EQ predicate on the "publisher" field.
func PublisherEQ(v string) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldPublisher, v))
}

// PublisherNEQ applies the NEQ predicate on the "publisher" field.
func PublisherNEQ(v string) predicate.Book {
	return predicate.Book(sql.FieldNEQ(FieldPublisher, v))
}

// PublisherIn applies the In predicate on the "publisher" field.
func PublisherIn(vs ...string) predicate.Book {
	return predicate.Book(sql.FieldIn(FieldPublisher, vs...))
}

// PublisherNotIn applies the NotIn predicate on the "publisher" field.
func PublisherNotIn(vs ...string) predicate.Book {
	return predicate.Book(sql.FieldNotIn(FieldPublisher, vs...))
}

// PublisherGT applies the GT predicate on the "publisher" field.
func PublisherGT(v string) predicate.Book {
	return predicate.Book(sql.FieldGT(FieldPublisher, v))
}

// PublisherGTE applies the GTE predicate on the "publisher" field.
func PublisherGTE(v string) predicate.Book {
	return predicate.Book(sql.FieldGTE(FieldPublisher, v))
}

// PublisherLT applies the LT predicate on the "publisher" field.
func PublisherLT(v string) predicate.Book {
	return predicate.Book(sql.FieldLT(FieldPublisher, v))
}

// PublisherLTE applies the LTE predicate on the "publisher" field.
func PublisherLTE(v string) predicate.Book {
	return predicate.Book(sql.FieldLTE(FieldPublisher, v))
}

// PublisherContains applies the Contains predicate on the "publisher" field.
func PublisherContains(v string) predicate.Book {
	return predicate.Book(sql.FieldContains(FieldPublisher, v))
}

// PublisherHasPrefix applies the HasPrefix predicate on the "publisher" field.
func PublisherHasPrefix(v string) predicate.Book {
	return predicate.Book(sql.FieldHasPrefix(FieldPublisher, v))
}

// PublisherHasSuffix applies the HasSuffix predicate on the "publisher" field.
func PublisherHasSuffix(v string) predicate.Book {
	return predicate.Book(sql.FieldHasSuffix(FieldPublisher, v))
}

// PublisherIsNil applies the IsNil predicate on the "publisher" field.
func PublisherIsNil() predicate.Book {
	return predicate.Book(sql.FieldIsNull(FieldPublisher))
}

// PublisherNotNil applies the NotNil predicate on the "publisher" field.
func PublisherNotNil() predicate.Book {
	return predicate.Book(sql.FieldNotNull(FieldPublisher))
}

// PublisherEqualFold applies the EqualFold predicate on the "publisher" field.
func PublisherEqualFold(v string) predicate.Book {
	return predicate.Book(sql.FieldEqualFold(FieldPublisher, v))
}

// PublisherContainsFold applies the ContainsFold predicate on the "publisher" field.
func PublisherContainsFold(v string) predicate.Book {
	return predicate.Book(sql.FieldContainsFold(FieldPublisher, v))
}

// PublishDateEQ applies the EQ predicate on the "publish_date" field.
func PublishDateEQ(v string) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldPublishDate, v))
}

// PublishDateNEQ applies the NEQ predicate on the "publish_date" field.
func PublishDateNEQ(v string) predicate.Book {
	return predicate.Book(sql.FieldNEQ(FieldPublishDate, v))
}

// PublishDateIn applies the In predicate on the "publish_date" field.
func PublishDateIn(vs ...string) predicate.Book {
	return predicate.Book(sql.FieldIn(FieldPublishDate, vs...))
}

// PublishDateNotIn applies the NotIn predicate on the "publish_date" field.
func PublishDateNotIn(vs ...string) predicate.Book {
	return predicate.Book(sql.FieldNotIn(FieldPublishDate, vs...))
}

// PublishDateGT applies the GT predicate on the "publish_date" field.
func PublishDateGT(v string) predicate.Book {
	return predicate.Book(sql.FieldGT(FieldPublishDate, v))
}

// PublishDateGTE applies the GTE predicate on the "publish_date" field.
func PublishDateGTE(v string) predicate.Book {
	return predicate.Book(sql.FieldGTE(FieldPublishDate, v))
}

// PublishDateLT applies the LT predicate on the "publish_date" field.
func PublishDateLT(v string) predicate.Book {
	return predicate.Book(sql.FieldLT(FieldPublishDate, v))
}

// PublishDateLTE applies the LTE predicate on the "publish_date" field.
func PublishDateLTE(v string) predicate.Book {
	return predicate.Book(sql.FieldLTE(FieldPublishDate, v))
}

// PublishDateContains applies the Contains predicate on the "publish_date" field.
func PublishDateContains(v string) predicate.Book {
	return predicate.Book(sql.FieldContains(FieldPublishDate, v))
}

// PublishDateHasPrefix applies the HasPrefix predicate on the "publish_date" field.
func PublishDateHasPrefix(v string) predicate.Book {
	return predicate.Book(sql.FieldHasPrefix(FieldPublishDate, v))
}

// PublishDateHasSuffix applies the HasSuffix predicate on the "publish_date" field.
func PublishDateHasSuffix(v string) predicate.Book {
	return predicate.Book(sql.FieldHasSuffix(FieldPublishDate, v))
}

// PublishDateIsNil applies the IsNil predicate on the "publish_date" field.
func PublishDateIsNil() predicate.Book {
	return predicate.Book(sql.FieldIsNull(FieldPublishDate))
}

// PublishDateNotNil applies the NotNil predicate on the "publish_date" field.
func PublishDateNotNil() predicate.Book {
	return predicate.Book(sql.FieldNotNull(FieldPublishDate))
}

// PublishDateEqualFold applies the EqualFold predicate on the "publish_date" field.
func PublishDateEqualFold(v string) predicate.Book {
	return predicate.Book(sql.FieldEqualFold(FieldPublishDate, v))
}

// PublishDateContainsFold applies the ContainsFold predicate on the "publish_date" field.
func PublishDateContainsFold(v string) predicate.Book {
	return predicate.Book(sql.FieldContainsFold(FieldPublishDate, v))
}

// IsbnEQ applies the EQ predicate on the "isbn" field.
func IsbnEQ(v string) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldIsbn, v))
}

// IsbnNEQ applies the NEQ predicate on the "isbn" field.
func IsbnNEQ(v string) predicate.Book {
	return predicate.Book(sql.FieldNEQ(FieldIsbn, v))
}

// IsbnIn applies the In predicate on the "isbn" field.
func IsbnIn(vs ...string) predicate.Book {
	return predicate.Book(sql.FieldIn(FieldIsbn, vs...))
}

// IsbnNotIn applies the NotIn predicate on the "isbn" field.
func IsbnNotIn(vs ...string) predicate.Book {
	return predicate.Book(sql.FieldNotIn(FieldIsbn, vs...))
}

// IsbnGT applies the GT predicate on the "isbn" field.
func IsbnGT(v string) predicate.Book {
	return predicate.Book(sql.FieldGT(FieldIsbn, v))
}

// IsbnGTE applies the GTE predicate on the "isbn" field.
func IsbnGTE(v string) predicate.Book {
	return predicate.Book(sql.FieldGTE(FieldIsbn, v))
}

// IsbnLT applies the LT predicate on the "isbn" field.
func IsbnLT(v string) predicate.Book {
	return predicate.Book(sql.FieldLT(FieldIsbn, v))
}

// IsbnLTE applies the LTE predicate on the "isbn" field.
func IsbnLTE(v string) predicate.Book {
	return predicate.Book(sql.FieldLTE(FieldIsbn, v))
}

// IsbnContains applies the Contains predicate on the "isbn" field.
func IsbnContains(v string) predicate.Book {
	return predicate.Book(sql.FieldContains(FieldIsbn, v))
}

// IsbnHasPrefix applies the HasPrefix predicate on the "isbn" field.
func IsbnHasPrefix(v string) predicate.Book {
	return predicate.Book(sql.FieldHasPrefix(FieldIsbn, v))
}

// IsbnHasSuffix applies the HasSuffix predicate on the "isbn" field.
func IsbnHasSuffix(v string) predicate.Book {
	return predicate.Book(sql.FieldHasSuffix(FieldIsbn, v))
}

// IsbnIsNil applies the IsNil predicate on the "isbn" field.
func IsbnIsNil() predicate.Book {
	return predicate.Book(sql.FieldIsNull(FieldIsbn))
}

// IsbnNotNil applies the NotNil predicate on the "isbn" field.
func IsbnNotNil() predicate.Book {
	return predicate.Book(sql.FieldNotNull(FieldIsbn))
}

// IsbnEqualFold applies the EqualFold predicate on the "isbn" field.
func IsbnEqualFold(v string) predicate.Book {
	return predicate.Book(sql.FieldEqualFold(FieldIsbn, v))
}

// IsbnContainsFold applies the ContainsFold predicate on the "isbn" field.
func IsbnContainsFold(v string) predicate.Book {
	return predicate.Book(sql.FieldContainsFold(FieldIsbn, v))
}

// PagesEQ applies the EQ predicate on the "pages" field.
func PagesEQ(v int) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldPages, v))
}

// PagesNEQ applies the NEQ predicate on the "pages" field.
func PagesNEQ(v int) predicate.Book {
	return predicate.Book(sql.FieldNEQ(FieldPages, v))
}

// PagesIn applies the In predicate on the "pages" field.
func PagesIn(vs ...int) predicate.Book {
	return predicate.Book(sql.FieldIn(FieldPages, vs...))
}

// PagesNotIn applies the NotIn predicate on the "pages" field.
func PagesNotIn(vs ...int) predicate.Book {
	return predicate.Book(sql.FieldNotIn(FieldPages, vs...))
}

// PagesGT applies the GT predicate on the "pages" field.
func PagesGT(v int) predicate.Book {
	return predicate.Book(sql.FieldGT(FieldPages, v))
}

// PagesGTE applies the GTE predicate on the "pages" field.
func PagesGTE(v int) predicate.Book {
	return predicate.Book(sql.FieldGTE(FieldPages, v))
}

// PagesLT applies the LT predicate on the "pages" field.
func PagesLT(v int) predicate.Book {
	return predicate.Book(sql.FieldLT(FieldPages, v))
}

// PagesLTE applies the LTE predicate on the "pages" field.
func PagesLTE(v int) predicate.Book {
	return predicate.Book(sql.FieldLTE(FieldPages, v))
}

// PagesIsNil applies the IsNil predicate on the "pages" field.
func PagesIsNil() predicate.Book {
	return predicate.Book(sql.FieldIsNull(FieldPages))
}

// PagesNotNil applies the NotNil predicate on the "pages" field.
func PagesNotNil() predicate.Book {
	return predicate.Book(sql.FieldNotNull(FieldPages))
}

// RatingEQ applies the EQ predicate on the "rating" field.
func RatingEQ(v float64) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldRating, v))
}

// RatingNEQ applies the NEQ predicate on the "rating" field.
func RatingNEQ(v float64) predicate.Book {
	return predicate.Book(sql.FieldNEQ(FieldRating, v))
}

// RatingIn applies the In predicate on the "rating" field.
func RatingIn(vs ...float64) predicate.Book {
	return predicate.Book(sql.FieldIn(FieldRating, vs...))
}

// RatingNotIn applies the NotIn predicate on the "rating" field.
func RatingNotIn(vs ...float64) predicate.Book {
	return predicate.Book(sql.FieldNotIn(FieldRating, vs...))
}

// RatingGT applies the GT predicate on the "rating" field.
func RatingGT(v float64) predicate.Book {
	return predicate.Book(sql.FieldGT(FieldRating, v))
}

// RatingGTE applies the GTE predicate on the "rating" field.
func RatingGTE(v float64) predicate.Book {
	return predicate.Book(sql.FieldGTE(FieldRating, v))
}

// RatingLT applies the LT predicate on the "rating" field.
func RatingLT(v float64) predicate.Book {
	return predicate.Book(sql.FieldLT(FieldRating, v))
}

// RatingLTE applies the LTE predicate on the "rating" field.
func RatingLTE(v float64) predicate.Book {
	return predicate.Book(sql.FieldLTE(FieldRating, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Book {
	return predicate.Book(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Book {
	return predicate.Book(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Book {
	return predicate.Book(sql.FieldNotIn(FieldStatus, vs...))
}

// ReviewEQ applies the EQ predicate on the "review" field.
func ReviewEQ(v string) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldReview, v))
}

// ReviewNEQ applies the NEQ predicate on the "review" field.
func ReviewNEQ(v string) predicate.Book {
	return predicate.Book(sql.FieldNEQ(FieldReview, v))
}

// ReviewIn applies the In predicate on the "review" field.
func ReviewIn(vs ...string) predicate.Book {
	return predicate.Book(sql.FieldIn(FieldReview, vs...))
}

// ReviewNotIn applies the NotIn predicate on the "review" field.
func ReviewNotIn(vs ...string) predicate.Book {
	return predicate.Book(sql.FieldNotIn(FieldReview, vs...))
}

// ReviewGT applies the GT predicate on the "review" field.
func ReviewGT(v string) predicate.Book {
	return predicate.Book(sql.FieldGT(FieldReview, v))
}

// ReviewGTE applies the GTE predicate on the "review" field.
func ReviewGTE(v string) predicate.Book {
	return predicate.Book(sql.FieldGTE(FieldReview, v))
}

// ReviewLT applies the LT predicate on the "review" field.
func ReviewLT(v string) predicate.Book {
	return predicate.Book(sql.FieldLT(FieldReview, v))
}

// ReviewLTE applies the LTE predicate on the "review" field.
func ReviewLTE(v string) predicate.Book {
	return predicate.Book(sql.FieldLTE(FieldReview, v))
}

// ReviewContains applies the Contains predicate on the "review" field.
func ReviewContains(v string) predicate.Book {
	return predicate.Book(sql.FieldContains(FieldReview, v))
}

// ReviewHasPrefix applies the HasPrefix predicate on the "review" field.
func ReviewHasPrefix(v string) predicate.Book {
	return predicate.Book(sql.FieldHasPrefix(FieldReview, v))
}

// ReviewHasSuffix applies the HasSuffix predicate on the "review" field.
func ReviewHasSuffix(v string) predicate.Book {
	return predicate.Book(sql.FieldHasSuffix(FieldReview, v))
}

// ReviewIsNil applies the IsNil predicate on the "review" field.
func ReviewIsNil() predicate.Book {
	return predicate.Book(sql.FieldIsNull(FieldReview))
}

// ReviewNotNil applies the NotNil predicate on the "review" field.
func ReviewNotNil() predicate.Book {
	return predicate.Book(sql.FieldNotNull(FieldReview))
}

// ReviewEqualFold applies the EqualFold predicate on the "review" field.
func ReviewEqualFold(v string) predicate.Book {
	return predicate.Book(sql.FieldEqualFold(FieldReview, v))
}

// ReviewContainsFold applies the ContainsFold predicate on the "review" field.
func ReviewContainsFold(v string) predicate.Book {
	return predicate.Book(sql.FieldContainsFold(FieldReview, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Book {
	return predicate.Book(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Book {
	return predicate.Book(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Book {
	return predicate.Book(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Book {
	return predicate.Book(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Book {
	return predicate.Book(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Book {
	return predicate.Book(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Book {
	return predicate.Book(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Book {
	return predicate.Book(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Book {
	return predicate.Book(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Book {
	return predicate.Book(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Book {
	return predicate.Book(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Book {
	return predicate.Book(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Book {
	return predicate.Book(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Book {
	return predicate.Book(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasCoverImage applies the HasEdge predicate on the "cover_image" edge.
func HasCoverImage() predicate.Book {
	return predicate.Book(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CoverImageTable, CoverImageColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCoverImageWith applies the HasEdge predicate on the "cover_image" edge with a given conditions (other predicates).
func HasCoverImageWith(preds ...predicate.Image) predicate.Book {
	return predicate.Book(func(s *sql.Selector) {
		step := newCoverImageStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.Book {
	return predicate.Book(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.User) predicate.Book {
	return predicate.Book(func(s *sql.Selector) {
		step := newOwnerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Book) predicate.Book {
	return predicate.Book(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Book) predicate.Book {
	return predicate.Book(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Book) predicate.Book {
	return predicate.Book(sql.NotPredicates(p))
}
