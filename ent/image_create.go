// Code generated by ent, DO NOT EDIT.

package ent

import (
	"blog-go/ent/book"
	"blog-go/ent/image"
	"blog-go/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ImageCreate is the builder for creating a Image entity.
type ImageCreate struct {
	config
	mutation *ImageMutation
	hooks    []Hook
}

// SetFilename sets the "filename" field.
func (ic *ImageCreate) SetFilename(s string) *ImageCreate {
	ic.mutation.SetFilename(s)
	return ic
}

// SetURL sets the "url" field.
func (ic *ImageCreate) SetURL(s string) *ImageCreate {
	ic.mutation.SetURL(s)
	return ic
}

// SetSize sets the "size" field.
func (ic *ImageCreate) SetSize(i int64) *ImageCreate {
	ic.mutation.SetSize(i)
	return ic
}

// SetType sets the "type" field.
func (ic *ImageCreate) SetType(s string) *ImageCreate {
	ic.mutation.SetType(s)
	return ic
}

// SetCreatedAt sets the "created_at" field.
func (ic *ImageCreate) SetCreatedAt(t time.Time) *ImageCreate {
	ic.mutation.SetCreatedAt(t)
	return ic
}

// SetWidth sets the "width" field.
func (ic *ImageCreate) SetWidth(i int) *ImageCreate {
	ic.mutation.SetWidth(i)
	return ic
}

// SetNillableWidth sets the "width" field if the given value is not nil.
func (ic *ImageCreate) SetNillableWidth(i *int) *ImageCreate {
	if i != nil {
		ic.SetWidth(*i)
	}
	return ic
}

// SetHeight sets the "height" field.
func (ic *ImageCreate) SetHeight(i int) *ImageCreate {
	ic.mutation.SetHeight(i)
	return ic
}

// SetNillableHeight sets the "height" field if the given value is not nil.
func (ic *ImageCreate) SetNillableHeight(i *int) *ImageCreate {
	if i != nil {
		ic.SetHeight(*i)
	}
	return ic
}

// SetUploadedByID sets the "uploaded_by" edge to the User entity by ID.
func (ic *ImageCreate) SetUploadedByID(id int) *ImageCreate {
	ic.mutation.SetUploadedByID(id)
	return ic
}

// SetUploadedBy sets the "uploaded_by" edge to the User entity.
func (ic *ImageCreate) SetUploadedBy(u *User) *ImageCreate {
	return ic.SetUploadedByID(u.ID)
}

// AddBookIDs adds the "books" edge to the Book entity by IDs.
func (ic *ImageCreate) AddBookIDs(ids ...int) *ImageCreate {
	ic.mutation.AddBookIDs(ids...)
	return ic
}

// AddBooks adds the "books" edges to the Book entity.
func (ic *ImageCreate) AddBooks(b ...*Book) *ImageCreate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return ic.AddBookIDs(ids...)
}

// Mutation returns the ImageMutation object of the builder.
func (ic *ImageCreate) Mutation() *ImageMutation {
	return ic.mutation
}

// Save creates the Image in the database.
func (ic *ImageCreate) Save(ctx context.Context) (*Image, error) {
	ic.defaults()
	return withHooks(ctx, ic.sqlSave, ic.mutation, ic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ic *ImageCreate) SaveX(ctx context.Context) *Image {
	v, err := ic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ic *ImageCreate) Exec(ctx context.Context) error {
	_, err := ic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ic *ImageCreate) ExecX(ctx context.Context) {
	if err := ic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ic *ImageCreate) defaults() {
	if _, ok := ic.mutation.Width(); !ok {
		v := image.DefaultWidth
		ic.mutation.SetWidth(v)
	}
	if _, ok := ic.mutation.Height(); !ok {
		v := image.DefaultHeight
		ic.mutation.SetHeight(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ic *ImageCreate) check() error {
	if _, ok := ic.mutation.Filename(); !ok {
		return &ValidationError{Name: "filename", err: errors.New(`ent: missing required field "Image.filename"`)}
	}
	if v, ok := ic.mutation.Filename(); ok {
		if err := image.FilenameValidator(v); err != nil {
			return &ValidationError{Name: "filename", err: fmt.Errorf(`ent: validator failed for field "Image.filename": %w`, err)}
		}
	}
	if _, ok := ic.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New(`ent: missing required field "Image.url"`)}
	}
	if v, ok := ic.mutation.URL(); ok {
		if err := image.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "Image.url": %w`, err)}
		}
	}
	if _, ok := ic.mutation.Size(); !ok {
		return &ValidationError{Name: "size", err: errors.New(`ent: missing required field "Image.size"`)}
	}
	if v, ok := ic.mutation.Size(); ok {
		if err := image.SizeValidator(v); err != nil {
			return &ValidationError{Name: "size", err: fmt.Errorf(`ent: validator failed for field "Image.size": %w`, err)}
		}
	}
	if _, ok := ic.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Image.type"`)}
	}
	if v, ok := ic.mutation.GetType(); ok {
		if err := image.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Image.type": %w`, err)}
		}
	}
	if _, ok := ic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Image.created_at"`)}
	}
	if _, ok := ic.mutation.Width(); !ok {
		return &ValidationError{Name: "width", err: errors.New(`ent: missing required field "Image.width"`)}
	}
	if _, ok := ic.mutation.Height(); !ok {
		return &ValidationError{Name: "height", err: errors.New(`ent: missing required field "Image.height"`)}
	}
	if _, ok := ic.mutation.UploadedByID(); !ok {
		return &ValidationError{Name: "uploaded_by", err: errors.New(`ent: missing required edge "Image.uploaded_by"`)}
	}
	return nil
}

func (ic *ImageCreate) sqlSave(ctx context.Context) (*Image, error) {
	if err := ic.check(); err != nil {
		return nil, err
	}
	_node, _spec := ic.createSpec()
	if err := sqlgraph.CreateNode(ctx, ic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ic.mutation.id = &_node.ID
	ic.mutation.done = true
	return _node, nil
}

func (ic *ImageCreate) createSpec() (*Image, *sqlgraph.CreateSpec) {
	var (
		_node = &Image{config: ic.config}
		_spec = sqlgraph.NewCreateSpec(image.Table, sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt))
	)
	if value, ok := ic.mutation.Filename(); ok {
		_spec.SetField(image.FieldFilename, field.TypeString, value)
		_node.Filename = value
	}
	if value, ok := ic.mutation.URL(); ok {
		_spec.SetField(image.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if value, ok := ic.mutation.Size(); ok {
		_spec.SetField(image.FieldSize, field.TypeInt64, value)
		_node.Size = value
	}
	if value, ok := ic.mutation.GetType(); ok {
		_spec.SetField(image.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := ic.mutation.CreatedAt(); ok {
		_spec.SetField(image.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ic.mutation.Width(); ok {
		_spec.SetField(image.FieldWidth, field.TypeInt, value)
		_node.Width = value
	}
	if value, ok := ic.mutation.Height(); ok {
		_spec.SetField(image.FieldHeight, field.TypeInt, value)
		_node.Height = value
	}
	if nodes := ic.mutation.UploadedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   image.UploadedByTable,
			Columns: []string{image.UploadedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_images = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.BooksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   image.BooksTable,
			Columns: []string{image.BooksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(book.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ImageCreateBulk is the builder for creating many Image entities in bulk.
type ImageCreateBulk struct {
	config
	err      error
	builders []*ImageCreate
}

// Save creates the Image entities in the database.
func (icb *ImageCreateBulk) Save(ctx context.Context) ([]*Image, error) {
	if icb.err != nil {
		return nil, icb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(icb.builders))
	nodes := make([]*Image, len(icb.builders))
	mutators := make([]Mutator, len(icb.builders))
	for i := range icb.builders {
		func(i int, root context.Context) {
			builder := icb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ImageMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, icb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, icb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, icb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (icb *ImageCreateBulk) SaveX(ctx context.Context) []*Image {
	v, err := icb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (icb *ImageCreateBulk) Exec(ctx context.Context) error {
	_, err := icb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icb *ImageCreateBulk) ExecX(ctx context.Context) {
	if err := icb.Exec(ctx); err != nil {
		panic(err)
	}
}
