// Code generated by ent, DO NOT EDIT.

package ent

import (
	"blog-go/ent/book"
	"blog-go/ent/collection"
	"blog-go/ent/comment"
	"blog-go/ent/friend"
	"blog-go/ent/hitokoto"
	"blog-go/ent/image"
	"blog-go/ent/post"
	"blog-go/ent/schema"
	"blog-go/ent/tag"
	"blog-go/ent/user"
	"time"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	bookFields := schema.Book{}.Fields()
	_ = bookFields
	// bookDescTitle is the schema descriptor for title field.
	bookDescTitle := bookFields[0].Descriptor()
	// book.TitleValidator is a validator for the "title" field. It is called by the builders before save.
	book.TitleValidator = bookDescTitle.Validators[0].(func(string) error)
	// bookDescAuthor is the schema descriptor for author field.
	bookDescAuthor := bookFields[1].Descriptor()
	// book.AuthorValidator is a validator for the "author" field. It is called by the builders before save.
	book.AuthorValidator = bookDescAuthor.Validators[0].(func(string) error)
	// bookDescCover is the schema descriptor for cover field.
	bookDescCover := bookFields[3].Descriptor()
	// book.DefaultCover holds the default value on creation for the cover field.
	book.DefaultCover = bookDescCover.Default.(string)
	// bookDescRating is the schema descriptor for rating field.
	bookDescRating := bookFields[8].Descriptor()
	// book.DefaultRating holds the default value on creation for the rating field.
	book.DefaultRating = bookDescRating.Default.(float64)
	collectionFields := schema.Collection{}.Fields()
	_ = collectionFields
	// collectionDescType is the schema descriptor for type field.
	collectionDescType := collectionFields[0].Descriptor()
	// collection.TypeValidator is a validator for the "type" field. It is called by the builders before save.
	collection.TypeValidator = collectionDescType.Validators[0].(func(string) error)
	// collectionDescTitle is the schema descriptor for title field.
	collectionDescTitle := collectionFields[1].Descriptor()
	// collection.TitleValidator is a validator for the "title" field. It is called by the builders before save.
	collection.TitleValidator = collectionDescTitle.Validators[0].(func(string) error)
	// collectionDescCreatedAt is the schema descriptor for created_at field.
	collectionDescCreatedAt := collectionFields[6].Descriptor()
	// collection.DefaultCreatedAt holds the default value on creation for the created_at field.
	collection.DefaultCreatedAt = collectionDescCreatedAt.Default.(func() time.Time)
	// collectionDescUpdatedAt is the schema descriptor for updated_at field.
	collectionDescUpdatedAt := collectionFields[7].Descriptor()
	// collection.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	collection.DefaultUpdatedAt = collectionDescUpdatedAt.Default.(func() time.Time)
	// collection.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	collection.UpdateDefaultUpdatedAt = collectionDescUpdatedAt.UpdateDefault.(func() time.Time)
	commentFields := schema.Comment{}.Fields()
	_ = commentFields
	// commentDescContent is the schema descriptor for content field.
	commentDescContent := commentFields[0].Descriptor()
	// comment.ContentValidator is a validator for the "content" field. It is called by the builders before save.
	comment.ContentValidator = commentDescContent.Validators[0].(func(string) error)
	// commentDescAuthor is the schema descriptor for author field.
	commentDescAuthor := commentFields[1].Descriptor()
	// comment.AuthorValidator is a validator for the "author" field. It is called by the builders before save.
	comment.AuthorValidator = commentDescAuthor.Validators[0].(func(string) error)
	// commentDescEmail is the schema descriptor for email field.
	commentDescEmail := commentFields[2].Descriptor()
	// comment.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	comment.EmailValidator = commentDescEmail.Validators[0].(func(string) error)
	// commentDescApproved is the schema descriptor for approved field.
	commentDescApproved := commentFields[4].Descriptor()
	// comment.DefaultApproved holds the default value on creation for the approved field.
	comment.DefaultApproved = commentDescApproved.Default.(bool)
	// commentDescAvatar is the schema descriptor for avatar field.
	commentDescAvatar := commentFields[7].Descriptor()
	// comment.DefaultAvatar holds the default value on creation for the avatar field.
	comment.DefaultAvatar = commentDescAvatar.Default.(string)
	friendFields := schema.Friend{}.Fields()
	_ = friendFields
	// friendDescName is the schema descriptor for name field.
	friendDescName := friendFields[0].Descriptor()
	// friend.NameValidator is a validator for the "name" field. It is called by the builders before save.
	friend.NameValidator = friendDescName.Validators[0].(func(string) error)
	// friendDescURL is the schema descriptor for url field.
	friendDescURL := friendFields[1].Descriptor()
	// friend.URLValidator is a validator for the "url" field. It is called by the builders before save.
	friend.URLValidator = friendDescURL.Validators[0].(func(string) error)
	// friendDescAvatar is the schema descriptor for avatar field.
	friendDescAvatar := friendFields[2].Descriptor()
	// friend.DefaultAvatar holds the default value on creation for the avatar field.
	friend.DefaultAvatar = friendDescAvatar.Default.(string)
	hitokotoFields := schema.Hitokoto{}.Fields()
	_ = hitokotoFields
	// hitokotoDescContent is the schema descriptor for content field.
	hitokotoDescContent := hitokotoFields[0].Descriptor()
	// hitokoto.ContentValidator is a validator for the "content" field. It is called by the builders before save.
	hitokoto.ContentValidator = hitokotoDescContent.Validators[0].(func(string) error)
	imageFields := schema.Image{}.Fields()
	_ = imageFields
	// imageDescFilename is the schema descriptor for filename field.
	imageDescFilename := imageFields[0].Descriptor()
	// image.FilenameValidator is a validator for the "filename" field. It is called by the builders before save.
	image.FilenameValidator = imageDescFilename.Validators[0].(func(string) error)
	// imageDescURL is the schema descriptor for url field.
	imageDescURL := imageFields[1].Descriptor()
	// image.URLValidator is a validator for the "url" field. It is called by the builders before save.
	image.URLValidator = imageDescURL.Validators[0].(func(string) error)
	// imageDescSize is the schema descriptor for size field.
	imageDescSize := imageFields[2].Descriptor()
	// image.SizeValidator is a validator for the "size" field. It is called by the builders before save.
	image.SizeValidator = imageDescSize.Validators[0].(func(int64) error)
	// imageDescType is the schema descriptor for type field.
	imageDescType := imageFields[3].Descriptor()
	// image.TypeValidator is a validator for the "type" field. It is called by the builders before save.
	image.TypeValidator = imageDescType.Validators[0].(func(string) error)
	// imageDescWidth is the schema descriptor for width field.
	imageDescWidth := imageFields[5].Descriptor()
	// image.DefaultWidth holds the default value on creation for the width field.
	image.DefaultWidth = imageDescWidth.Default.(int)
	// imageDescHeight is the schema descriptor for height field.
	imageDescHeight := imageFields[6].Descriptor()
	// image.DefaultHeight holds the default value on creation for the height field.
	image.DefaultHeight = imageDescHeight.Default.(int)
	postFields := schema.Post{}.Fields()
	_ = postFields
	// postDescTitle is the schema descriptor for title field.
	postDescTitle := postFields[0].Descriptor()
	// post.TitleValidator is a validator for the "title" field. It is called by the builders before save.
	post.TitleValidator = postDescTitle.Validators[0].(func(string) error)
	// postDescContent is the schema descriptor for content field.
	postDescContent := postFields[1].Descriptor()
	// post.ContentValidator is a validator for the "content" field. It is called by the builders before save.
	post.ContentValidator = postDescContent.Validators[0].(func(string) error)
	// postDescExcerpt is the schema descriptor for excerpt field.
	postDescExcerpt := postFields[2].Descriptor()
	// post.ExcerptValidator is a validator for the "excerpt" field. It is called by the builders before save.
	post.ExcerptValidator = postDescExcerpt.Validators[0].(func(string) error)
	// postDescCoverImage is the schema descriptor for cover_image field.
	postDescCoverImage := postFields[3].Descriptor()
	// post.DefaultCoverImage holds the default value on creation for the cover_image field.
	post.DefaultCoverImage = postDescCoverImage.Default.(string)
	// postDescPublished is the schema descriptor for published field.
	postDescPublished := postFields[4].Descriptor()
	// post.DefaultPublished holds the default value on creation for the published field.
	post.DefaultPublished = postDescPublished.Default.(bool)
	// postDescViews is the schema descriptor for views field.
	postDescViews := postFields[8].Descriptor()
	// post.DefaultViews holds the default value on creation for the views field.
	post.DefaultViews = postDescViews.Default.(int)
	// postDescAuthor is the schema descriptor for author field.
	postDescAuthor := postFields[10].Descriptor()
	// post.AuthorValidator is a validator for the "author" field. It is called by the builders before save.
	post.AuthorValidator = postDescAuthor.Validators[0].(func(string) error)
	tagFields := schema.Tag{}.Fields()
	_ = tagFields
	// tagDescName is the schema descriptor for name field.
	tagDescName := tagFields[0].Descriptor()
	// tag.NameValidator is a validator for the "name" field. It is called by the builders before save.
	tag.NameValidator = tagDescName.Validators[0].(func(string) error)
	// tagDescSlug is the schema descriptor for slug field.
	tagDescSlug := tagFields[1].Descriptor()
	// tag.SlugValidator is a validator for the "slug" field. It is called by the builders before save.
	tag.SlugValidator = tagDescSlug.Validators[0].(func(string) error)
	// tagDescCount is the schema descriptor for count field.
	tagDescCount := tagFields[2].Descriptor()
	// tag.DefaultCount holds the default value on creation for the count field.
	tag.DefaultCount = tagDescCount.Default.(int)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescUsername is the schema descriptor for username field.
	userDescUsername := userFields[0].Descriptor()
	// user.UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	user.UsernameValidator = userDescUsername.Validators[0].(func(string) error)
	// userDescEmail is the schema descriptor for email field.
	userDescEmail := userFields[1].Descriptor()
	// user.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	user.EmailValidator = userDescEmail.Validators[0].(func(string) error)
	// userDescPassword is the schema descriptor for password field.
	userDescPassword := userFields[2].Descriptor()
	// user.PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	user.PasswordValidator = userDescPassword.Validators[0].(func(string) error)
	// userDescRole is the schema descriptor for role field.
	userDescRole := userFields[3].Descriptor()
	// user.DefaultRole holds the default value on creation for the role field.
	user.DefaultRole = userDescRole.Default.(string)
}
