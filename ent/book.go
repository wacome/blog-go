// Code generated by ent, DO NOT EDIT.

package ent

import (
	"blog-go/ent/book"
	"blog-go/ent/image"
	"blog-go/ent/user"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Book is the model entity for the Book schema.
type Book struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Author holds the value of the "author" field.
	Author string `json:"author,omitempty"`
	// Desc holds the value of the "desc" field.
	Desc string `json:"desc,omitempty"`
	// Cover holds the value of the "cover" field.
	Cover string `json:"cover,omitempty"`
	// Publisher holds the value of the "publisher" field.
	Publisher string `json:"publisher,omitempty"`
	// PublishDate holds the value of the "publish_date" field.
	PublishDate string `json:"publish_date,omitempty"`
	// Isbn holds the value of the "isbn" field.
	Isbn string `json:"isbn,omitempty"`
	// Pages holds the value of the "pages" field.
	Pages int `json:"pages,omitempty"`
	// Rating holds the value of the "rating" field.
	Rating float64 `json:"rating,omitempty"`
	// Status holds the value of the "status" field.
	Status book.Status `json:"status,omitempty"`
	// Review holds the value of the "review" field.
	Review string `json:"review,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BookQuery when eager-loading is set.
	Edges        BookEdges `json:"edges"`
	image_books  *int
	user_books   *int
	selectValues sql.SelectValues
}

// BookEdges holds the relations/edges for other nodes in the graph.
type BookEdges struct {
	// CoverImage holds the value of the cover_image edge.
	CoverImage *Image `json:"cover_image,omitempty"`
	// Owner holds the value of the owner edge.
	Owner *User `json:"owner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// CoverImageOrErr returns the CoverImage value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BookEdges) CoverImageOrErr() (*Image, error) {
	if e.CoverImage != nil {
		return e.CoverImage, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: image.Label}
	}
	return nil, &NotLoadedError{edge: "cover_image"}
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BookEdges) OwnerOrErr() (*User, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Book) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case book.FieldRating:
			values[i] = new(sql.NullFloat64)
		case book.FieldID, book.FieldPages:
			values[i] = new(sql.NullInt64)
		case book.FieldTitle, book.FieldAuthor, book.FieldDesc, book.FieldCover, book.FieldPublisher, book.FieldPublishDate, book.FieldIsbn, book.FieldStatus, book.FieldReview:
			values[i] = new(sql.NullString)
		case book.FieldCreatedAt, book.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case book.ForeignKeys[0]: // image_books
			values[i] = new(sql.NullInt64)
		case book.ForeignKeys[1]: // user_books
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Book fields.
func (b *Book) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case book.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			b.ID = int(value.Int64)
		case book.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				b.Title = value.String
			}
		case book.FieldAuthor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field author", values[i])
			} else if value.Valid {
				b.Author = value.String
			}
		case book.FieldDesc:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field desc", values[i])
			} else if value.Valid {
				b.Desc = value.String
			}
		case book.FieldCover:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cover", values[i])
			} else if value.Valid {
				b.Cover = value.String
			}
		case book.FieldPublisher:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field publisher", values[i])
			} else if value.Valid {
				b.Publisher = value.String
			}
		case book.FieldPublishDate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field publish_date", values[i])
			} else if value.Valid {
				b.PublishDate = value.String
			}
		case book.FieldIsbn:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field isbn", values[i])
			} else if value.Valid {
				b.Isbn = value.String
			}
		case book.FieldPages:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field pages", values[i])
			} else if value.Valid {
				b.Pages = int(value.Int64)
			}
		case book.FieldRating:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field rating", values[i])
			} else if value.Valid {
				b.Rating = value.Float64
			}
		case book.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				b.Status = book.Status(value.String)
			}
		case book.FieldReview:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field review", values[i])
			} else if value.Valid {
				b.Review = value.String
			}
		case book.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				b.CreatedAt = value.Time
			}
		case book.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				b.UpdatedAt = value.Time
			}
		case book.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field image_books", value)
			} else if value.Valid {
				b.image_books = new(int)
				*b.image_books = int(value.Int64)
			}
		case book.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_books", value)
			} else if value.Valid {
				b.user_books = new(int)
				*b.user_books = int(value.Int64)
			}
		default:
			b.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Book.
// This includes values selected through modifiers, order, etc.
func (b *Book) Value(name string) (ent.Value, error) {
	return b.selectValues.Get(name)
}

// QueryCoverImage queries the "cover_image" edge of the Book entity.
func (b *Book) QueryCoverImage() *ImageQuery {
	return NewBookClient(b.config).QueryCoverImage(b)
}

// QueryOwner queries the "owner" edge of the Book entity.
func (b *Book) QueryOwner() *UserQuery {
	return NewBookClient(b.config).QueryOwner(b)
}

// Update returns a builder for updating this Book.
// Note that you need to call Book.Unwrap() before calling this method if this Book
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Book) Update() *BookUpdateOne {
	return NewBookClient(b.config).UpdateOne(b)
}

// Unwrap unwraps the Book entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (b *Book) Unwrap() *Book {
	_tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Book is not a transactional entity")
	}
	b.config.driver = _tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Book) String() string {
	var builder strings.Builder
	builder.WriteString("Book(")
	builder.WriteString(fmt.Sprintf("id=%v, ", b.ID))
	builder.WriteString("title=")
	builder.WriteString(b.Title)
	builder.WriteString(", ")
	builder.WriteString("author=")
	builder.WriteString(b.Author)
	builder.WriteString(", ")
	builder.WriteString("desc=")
	builder.WriteString(b.Desc)
	builder.WriteString(", ")
	builder.WriteString("cover=")
	builder.WriteString(b.Cover)
	builder.WriteString(", ")
	builder.WriteString("publisher=")
	builder.WriteString(b.Publisher)
	builder.WriteString(", ")
	builder.WriteString("publish_date=")
	builder.WriteString(b.PublishDate)
	builder.WriteString(", ")
	builder.WriteString("isbn=")
	builder.WriteString(b.Isbn)
	builder.WriteString(", ")
	builder.WriteString("pages=")
	builder.WriteString(fmt.Sprintf("%v", b.Pages))
	builder.WriteString(", ")
	builder.WriteString("rating=")
	builder.WriteString(fmt.Sprintf("%v", b.Rating))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", b.Status))
	builder.WriteString(", ")
	builder.WriteString("review=")
	builder.WriteString(b.Review)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(b.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(b.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Books is a parsable slice of Book.
type Books []*Book
