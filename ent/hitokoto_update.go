// Code generated by ent, DO NOT EDIT.

package ent

import (
	"blog-go/ent/hitokoto"
	"blog-go/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// HitokotoUpdate is the builder for updating Hitokoto entities.
type HitokotoUpdate struct {
	config
	hooks    []Hook
	mutation *HitokotoMutation
}

// Where appends a list predicates to the HitokotoUpdate builder.
func (hu *HitokotoUpdate) Where(ps ...predicate.Hitokoto) *HitokotoUpdate {
	hu.mutation.Where(ps...)
	return hu
}

// SetContent sets the "content" field.
func (hu *HitokotoUpdate) SetContent(s string) *HitokotoUpdate {
	hu.mutation.SetContent(s)
	return hu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (hu *HitokotoUpdate) SetNillableContent(s *string) *HitokotoUpdate {
	if s != nil {
		hu.SetContent(*s)
	}
	return hu
}

// SetSource sets the "source" field.
func (hu *HitokotoUpdate) SetSource(s string) *HitokotoUpdate {
	hu.mutation.SetSource(s)
	return hu
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (hu *HitokotoUpdate) SetNillableSource(s *string) *HitokotoUpdate {
	if s != nil {
		hu.SetSource(*s)
	}
	return hu
}

// ClearSource clears the value of the "source" field.
func (hu *HitokotoUpdate) ClearSource() *HitokotoUpdate {
	hu.mutation.ClearSource()
	return hu
}

// SetCreatedAt sets the "created_at" field.
func (hu *HitokotoUpdate) SetCreatedAt(t time.Time) *HitokotoUpdate {
	hu.mutation.SetCreatedAt(t)
	return hu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (hu *HitokotoUpdate) SetNillableCreatedAt(t *time.Time) *HitokotoUpdate {
	if t != nil {
		hu.SetCreatedAt(*t)
	}
	return hu
}

// SetUpdatedAt sets the "updated_at" field.
func (hu *HitokotoUpdate) SetUpdatedAt(t time.Time) *HitokotoUpdate {
	hu.mutation.SetUpdatedAt(t)
	return hu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (hu *HitokotoUpdate) SetNillableUpdatedAt(t *time.Time) *HitokotoUpdate {
	if t != nil {
		hu.SetUpdatedAt(*t)
	}
	return hu
}

// Mutation returns the HitokotoMutation object of the builder.
func (hu *HitokotoUpdate) Mutation() *HitokotoMutation {
	return hu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (hu *HitokotoUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, hu.sqlSave, hu.mutation, hu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (hu *HitokotoUpdate) SaveX(ctx context.Context) int {
	affected, err := hu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (hu *HitokotoUpdate) Exec(ctx context.Context) error {
	_, err := hu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hu *HitokotoUpdate) ExecX(ctx context.Context) {
	if err := hu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hu *HitokotoUpdate) check() error {
	if v, ok := hu.mutation.Content(); ok {
		if err := hitokoto.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "Hitokoto.content": %w`, err)}
		}
	}
	return nil
}

func (hu *HitokotoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := hu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(hitokoto.Table, hitokoto.Columns, sqlgraph.NewFieldSpec(hitokoto.FieldID, field.TypeInt))
	if ps := hu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hu.mutation.Content(); ok {
		_spec.SetField(hitokoto.FieldContent, field.TypeString, value)
	}
	if value, ok := hu.mutation.Source(); ok {
		_spec.SetField(hitokoto.FieldSource, field.TypeString, value)
	}
	if hu.mutation.SourceCleared() {
		_spec.ClearField(hitokoto.FieldSource, field.TypeString)
	}
	if value, ok := hu.mutation.CreatedAt(); ok {
		_spec.SetField(hitokoto.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := hu.mutation.UpdatedAt(); ok {
		_spec.SetField(hitokoto.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, hu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hitokoto.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	hu.mutation.done = true
	return n, nil
}

// HitokotoUpdateOne is the builder for updating a single Hitokoto entity.
type HitokotoUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *HitokotoMutation
}

// SetContent sets the "content" field.
func (huo *HitokotoUpdateOne) SetContent(s string) *HitokotoUpdateOne {
	huo.mutation.SetContent(s)
	return huo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (huo *HitokotoUpdateOne) SetNillableContent(s *string) *HitokotoUpdateOne {
	if s != nil {
		huo.SetContent(*s)
	}
	return huo
}

// SetSource sets the "source" field.
func (huo *HitokotoUpdateOne) SetSource(s string) *HitokotoUpdateOne {
	huo.mutation.SetSource(s)
	return huo
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (huo *HitokotoUpdateOne) SetNillableSource(s *string) *HitokotoUpdateOne {
	if s != nil {
		huo.SetSource(*s)
	}
	return huo
}

// ClearSource clears the value of the "source" field.
func (huo *HitokotoUpdateOne) ClearSource() *HitokotoUpdateOne {
	huo.mutation.ClearSource()
	return huo
}

// SetCreatedAt sets the "created_at" field.
func (huo *HitokotoUpdateOne) SetCreatedAt(t time.Time) *HitokotoUpdateOne {
	huo.mutation.SetCreatedAt(t)
	return huo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (huo *HitokotoUpdateOne) SetNillableCreatedAt(t *time.Time) *HitokotoUpdateOne {
	if t != nil {
		huo.SetCreatedAt(*t)
	}
	return huo
}

// SetUpdatedAt sets the "updated_at" field.
func (huo *HitokotoUpdateOne) SetUpdatedAt(t time.Time) *HitokotoUpdateOne {
	huo.mutation.SetUpdatedAt(t)
	return huo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (huo *HitokotoUpdateOne) SetNillableUpdatedAt(t *time.Time) *HitokotoUpdateOne {
	if t != nil {
		huo.SetUpdatedAt(*t)
	}
	return huo
}

// Mutation returns the HitokotoMutation object of the builder.
func (huo *HitokotoUpdateOne) Mutation() *HitokotoMutation {
	return huo.mutation
}

// Where appends a list predicates to the HitokotoUpdate builder.
func (huo *HitokotoUpdateOne) Where(ps ...predicate.Hitokoto) *HitokotoUpdateOne {
	huo.mutation.Where(ps...)
	return huo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (huo *HitokotoUpdateOne) Select(field string, fields ...string) *HitokotoUpdateOne {
	huo.fields = append([]string{field}, fields...)
	return huo
}

// Save executes the query and returns the updated Hitokoto entity.
func (huo *HitokotoUpdateOne) Save(ctx context.Context) (*Hitokoto, error) {
	return withHooks(ctx, huo.sqlSave, huo.mutation, huo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (huo *HitokotoUpdateOne) SaveX(ctx context.Context) *Hitokoto {
	node, err := huo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (huo *HitokotoUpdateOne) Exec(ctx context.Context) error {
	_, err := huo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (huo *HitokotoUpdateOne) ExecX(ctx context.Context) {
	if err := huo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (huo *HitokotoUpdateOne) check() error {
	if v, ok := huo.mutation.Content(); ok {
		if err := hitokoto.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "Hitokoto.content": %w`, err)}
		}
	}
	return nil
}

func (huo *HitokotoUpdateOne) sqlSave(ctx context.Context) (_node *Hitokoto, err error) {
	if err := huo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(hitokoto.Table, hitokoto.Columns, sqlgraph.NewFieldSpec(hitokoto.FieldID, field.TypeInt))
	id, ok := huo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Hitokoto.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := huo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, hitokoto.FieldID)
		for _, f := range fields {
			if !hitokoto.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != hitokoto.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := huo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := huo.mutation.Content(); ok {
		_spec.SetField(hitokoto.FieldContent, field.TypeString, value)
	}
	if value, ok := huo.mutation.Source(); ok {
		_spec.SetField(hitokoto.FieldSource, field.TypeString, value)
	}
	if huo.mutation.SourceCleared() {
		_spec.ClearField(hitokoto.FieldSource, field.TypeString)
	}
	if value, ok := huo.mutation.CreatedAt(); ok {
		_spec.SetField(hitokoto.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := huo.mutation.UpdatedAt(); ok {
		_spec.SetField(hitokoto.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &Hitokoto{config: huo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, huo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hitokoto.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	huo.mutation.done = true
	return _node, nil
}
