// Code generated by ent, DO NOT EDIT.

package ent

import (
	"blog-go/ent/collection"
	"blog-go/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CollectionUpdate is the builder for updating Collection entities.
type CollectionUpdate struct {
	config
	hooks    []Hook
	mutation *CollectionMutation
}

// Where appends a list predicates to the CollectionUpdate builder.
func (cu *CollectionUpdate) Where(ps ...predicate.Collection) *CollectionUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetType sets the "type" field.
func (cu *CollectionUpdate) SetType(s string) *CollectionUpdate {
	cu.mutation.SetType(s)
	return cu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (cu *CollectionUpdate) SetNillableType(s *string) *CollectionUpdate {
	if s != nil {
		cu.SetType(*s)
	}
	return cu
}

// SetTitle sets the "title" field.
func (cu *CollectionUpdate) SetTitle(s string) *CollectionUpdate {
	cu.mutation.SetTitle(s)
	return cu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (cu *CollectionUpdate) SetNillableTitle(s *string) *CollectionUpdate {
	if s != nil {
		cu.SetTitle(*s)
	}
	return cu
}

// SetAuthor sets the "author" field.
func (cu *CollectionUpdate) SetAuthor(s string) *CollectionUpdate {
	cu.mutation.SetAuthor(s)
	return cu
}

// SetNillableAuthor sets the "author" field if the given value is not nil.
func (cu *CollectionUpdate) SetNillableAuthor(s *string) *CollectionUpdate {
	if s != nil {
		cu.SetAuthor(*s)
	}
	return cu
}

// ClearAuthor clears the value of the "author" field.
func (cu *CollectionUpdate) ClearAuthor() *CollectionUpdate {
	cu.mutation.ClearAuthor()
	return cu
}

// SetCover sets the "cover" field.
func (cu *CollectionUpdate) SetCover(s string) *CollectionUpdate {
	cu.mutation.SetCover(s)
	return cu
}

// SetNillableCover sets the "cover" field if the given value is not nil.
func (cu *CollectionUpdate) SetNillableCover(s *string) *CollectionUpdate {
	if s != nil {
		cu.SetCover(*s)
	}
	return cu
}

// ClearCover clears the value of the "cover" field.
func (cu *CollectionUpdate) ClearCover() *CollectionUpdate {
	cu.mutation.ClearCover()
	return cu
}

// SetDate sets the "date" field.
func (cu *CollectionUpdate) SetDate(s string) *CollectionUpdate {
	cu.mutation.SetDate(s)
	return cu
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (cu *CollectionUpdate) SetNillableDate(s *string) *CollectionUpdate {
	if s != nil {
		cu.SetDate(*s)
	}
	return cu
}

// ClearDate clears the value of the "date" field.
func (cu *CollectionUpdate) ClearDate() *CollectionUpdate {
	cu.mutation.ClearDate()
	return cu
}

// SetLink sets the "link" field.
func (cu *CollectionUpdate) SetLink(s string) *CollectionUpdate {
	cu.mutation.SetLink(s)
	return cu
}

// SetNillableLink sets the "link" field if the given value is not nil.
func (cu *CollectionUpdate) SetNillableLink(s *string) *CollectionUpdate {
	if s != nil {
		cu.SetLink(*s)
	}
	return cu
}

// ClearLink clears the value of the "link" field.
func (cu *CollectionUpdate) ClearLink() *CollectionUpdate {
	cu.mutation.ClearLink()
	return cu
}

// SetCreatedAt sets the "created_at" field.
func (cu *CollectionUpdate) SetCreatedAt(t time.Time) *CollectionUpdate {
	cu.mutation.SetCreatedAt(t)
	return cu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cu *CollectionUpdate) SetNillableCreatedAt(t *time.Time) *CollectionUpdate {
	if t != nil {
		cu.SetCreatedAt(*t)
	}
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *CollectionUpdate) SetUpdatedAt(t time.Time) *CollectionUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// Mutation returns the CollectionMutation object of the builder.
func (cu *CollectionUpdate) Mutation() *CollectionMutation {
	return cu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CollectionUpdate) Save(ctx context.Context) (int, error) {
	cu.defaults()
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CollectionUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CollectionUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CollectionUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CollectionUpdate) defaults() {
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		v := collection.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CollectionUpdate) check() error {
	if v, ok := cu.mutation.GetType(); ok {
		if err := collection.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Collection.type": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Title(); ok {
		if err := collection.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Collection.title": %w`, err)}
		}
	}
	return nil
}

func (cu *CollectionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(collection.Table, collection.Columns, sqlgraph.NewFieldSpec(collection.FieldID, field.TypeInt))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.GetType(); ok {
		_spec.SetField(collection.FieldType, field.TypeString, value)
	}
	if value, ok := cu.mutation.Title(); ok {
		_spec.SetField(collection.FieldTitle, field.TypeString, value)
	}
	if value, ok := cu.mutation.Author(); ok {
		_spec.SetField(collection.FieldAuthor, field.TypeString, value)
	}
	if cu.mutation.AuthorCleared() {
		_spec.ClearField(collection.FieldAuthor, field.TypeString)
	}
	if value, ok := cu.mutation.Cover(); ok {
		_spec.SetField(collection.FieldCover, field.TypeString, value)
	}
	if cu.mutation.CoverCleared() {
		_spec.ClearField(collection.FieldCover, field.TypeString)
	}
	if value, ok := cu.mutation.Date(); ok {
		_spec.SetField(collection.FieldDate, field.TypeString, value)
	}
	if cu.mutation.DateCleared() {
		_spec.ClearField(collection.FieldDate, field.TypeString)
	}
	if value, ok := cu.mutation.Link(); ok {
		_spec.SetField(collection.FieldLink, field.TypeString, value)
	}
	if cu.mutation.LinkCleared() {
		_spec.ClearField(collection.FieldLink, field.TypeString)
	}
	if value, ok := cu.mutation.CreatedAt(); ok {
		_spec.SetField(collection.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(collection.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{collection.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CollectionUpdateOne is the builder for updating a single Collection entity.
type CollectionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CollectionMutation
}

// SetType sets the "type" field.
func (cuo *CollectionUpdateOne) SetType(s string) *CollectionUpdateOne {
	cuo.mutation.SetType(s)
	return cuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (cuo *CollectionUpdateOne) SetNillableType(s *string) *CollectionUpdateOne {
	if s != nil {
		cuo.SetType(*s)
	}
	return cuo
}

// SetTitle sets the "title" field.
func (cuo *CollectionUpdateOne) SetTitle(s string) *CollectionUpdateOne {
	cuo.mutation.SetTitle(s)
	return cuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (cuo *CollectionUpdateOne) SetNillableTitle(s *string) *CollectionUpdateOne {
	if s != nil {
		cuo.SetTitle(*s)
	}
	return cuo
}

// SetAuthor sets the "author" field.
func (cuo *CollectionUpdateOne) SetAuthor(s string) *CollectionUpdateOne {
	cuo.mutation.SetAuthor(s)
	return cuo
}

// SetNillableAuthor sets the "author" field if the given value is not nil.
func (cuo *CollectionUpdateOne) SetNillableAuthor(s *string) *CollectionUpdateOne {
	if s != nil {
		cuo.SetAuthor(*s)
	}
	return cuo
}

// ClearAuthor clears the value of the "author" field.
func (cuo *CollectionUpdateOne) ClearAuthor() *CollectionUpdateOne {
	cuo.mutation.ClearAuthor()
	return cuo
}

// SetCover sets the "cover" field.
func (cuo *CollectionUpdateOne) SetCover(s string) *CollectionUpdateOne {
	cuo.mutation.SetCover(s)
	return cuo
}

// SetNillableCover sets the "cover" field if the given value is not nil.
func (cuo *CollectionUpdateOne) SetNillableCover(s *string) *CollectionUpdateOne {
	if s != nil {
		cuo.SetCover(*s)
	}
	return cuo
}

// ClearCover clears the value of the "cover" field.
func (cuo *CollectionUpdateOne) ClearCover() *CollectionUpdateOne {
	cuo.mutation.ClearCover()
	return cuo
}

// SetDate sets the "date" field.
func (cuo *CollectionUpdateOne) SetDate(s string) *CollectionUpdateOne {
	cuo.mutation.SetDate(s)
	return cuo
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (cuo *CollectionUpdateOne) SetNillableDate(s *string) *CollectionUpdateOne {
	if s != nil {
		cuo.SetDate(*s)
	}
	return cuo
}

// ClearDate clears the value of the "date" field.
func (cuo *CollectionUpdateOne) ClearDate() *CollectionUpdateOne {
	cuo.mutation.ClearDate()
	return cuo
}

// SetLink sets the "link" field.
func (cuo *CollectionUpdateOne) SetLink(s string) *CollectionUpdateOne {
	cuo.mutation.SetLink(s)
	return cuo
}

// SetNillableLink sets the "link" field if the given value is not nil.
func (cuo *CollectionUpdateOne) SetNillableLink(s *string) *CollectionUpdateOne {
	if s != nil {
		cuo.SetLink(*s)
	}
	return cuo
}

// ClearLink clears the value of the "link" field.
func (cuo *CollectionUpdateOne) ClearLink() *CollectionUpdateOne {
	cuo.mutation.ClearLink()
	return cuo
}

// SetCreatedAt sets the "created_at" field.
func (cuo *CollectionUpdateOne) SetCreatedAt(t time.Time) *CollectionUpdateOne {
	cuo.mutation.SetCreatedAt(t)
	return cuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cuo *CollectionUpdateOne) SetNillableCreatedAt(t *time.Time) *CollectionUpdateOne {
	if t != nil {
		cuo.SetCreatedAt(*t)
	}
	return cuo
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *CollectionUpdateOne) SetUpdatedAt(t time.Time) *CollectionUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// Mutation returns the CollectionMutation object of the builder.
func (cuo *CollectionUpdateOne) Mutation() *CollectionMutation {
	return cuo.mutation
}

// Where appends a list predicates to the CollectionUpdate builder.
func (cuo *CollectionUpdateOne) Where(ps ...predicate.Collection) *CollectionUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CollectionUpdateOne) Select(field string, fields ...string) *CollectionUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Collection entity.
func (cuo *CollectionUpdateOne) Save(ctx context.Context) (*Collection, error) {
	cuo.defaults()
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CollectionUpdateOne) SaveX(ctx context.Context) *Collection {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CollectionUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CollectionUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CollectionUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		v := collection.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CollectionUpdateOne) check() error {
	if v, ok := cuo.mutation.GetType(); ok {
		if err := collection.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Collection.type": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Title(); ok {
		if err := collection.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Collection.title": %w`, err)}
		}
	}
	return nil
}

func (cuo *CollectionUpdateOne) sqlSave(ctx context.Context) (_node *Collection, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(collection.Table, collection.Columns, sqlgraph.NewFieldSpec(collection.FieldID, field.TypeInt))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Collection.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, collection.FieldID)
		for _, f := range fields {
			if !collection.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != collection.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.GetType(); ok {
		_spec.SetField(collection.FieldType, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Title(); ok {
		_spec.SetField(collection.FieldTitle, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Author(); ok {
		_spec.SetField(collection.FieldAuthor, field.TypeString, value)
	}
	if cuo.mutation.AuthorCleared() {
		_spec.ClearField(collection.FieldAuthor, field.TypeString)
	}
	if value, ok := cuo.mutation.Cover(); ok {
		_spec.SetField(collection.FieldCover, field.TypeString, value)
	}
	if cuo.mutation.CoverCleared() {
		_spec.ClearField(collection.FieldCover, field.TypeString)
	}
	if value, ok := cuo.mutation.Date(); ok {
		_spec.SetField(collection.FieldDate, field.TypeString, value)
	}
	if cuo.mutation.DateCleared() {
		_spec.ClearField(collection.FieldDate, field.TypeString)
	}
	if value, ok := cuo.mutation.Link(); ok {
		_spec.SetField(collection.FieldLink, field.TypeString, value)
	}
	if cuo.mutation.LinkCleared() {
		_spec.ClearField(collection.FieldLink, field.TypeString)
	}
	if value, ok := cuo.mutation.CreatedAt(); ok {
		_spec.SetField(collection.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(collection.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &Collection{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{collection.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
